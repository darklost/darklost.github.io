I"wm<blockquote>
  <p>解决 Cocos2d-x emoj表情 部分Android机 crash</p>
</blockquote>

<ul>
  <li>
    <p>1 过滤emoj表情</p>
  </li>
  <li>
    <p>2 修改引擎代码(基于cocos2d-x 2.2.6) 将jni 中传输 <code class="highlighter-rouge">jstring</code>  的 改用 <code class="highlighter-rouge">jbyteArray</code> 避免某些android 机型上 <code class="highlighter-rouge">NewStringUTF</code> 方法报错</p>
  </li>
</ul>

<p><code class="highlighter-rouge">cocos2dx\platform\android\CCImage.cpp</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/****************************************************************************
Copyright (c) 2010 cocos2d-x.org

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

//#define COCOS2D_DEBUG 1

#define __CC_PLATFORM_IMAGE_CPP__
#include "platform/CCImageCommon_cpp.h"
#include "platform/CCPlatformMacros.h"
#include "platform/CCImage.h"
#include "platform/CCFileUtils.h"
#include "jni/JniHelper.h"

#include &lt;android/log.h&gt;
#include &lt;string.h&gt;
#include &lt;jni.h&gt;

// prototype
void swapAlphaChannel(unsigned int *pImageMemory, unsigned int numPixels);

NS_CC_BEGIN

class BitmapDC
{
public:

    BitmapDC()
    : m_pData(NULL)
    , m_nWidth(0)
    , m_nHeight(0)
    {
    }

    ~BitmapDC(void)
    {
        if (m_pData)
        {
            delete [] m_pData;
        }
    }

    bool getBitmapFromJavaShadowStroke(	const char *text,
    									int nWidth,
    									int nHeight,
    									CCImage::ETextAlign eAlignMask,
    									const char * pFontName,
    									float fontSize,
    									float textTintR 		= 1.0,
    									float textTintG 		= 1.0,
    									float textTintB 		= 1.0,
    									bool shadow 			= false,
    									float shadowDeltaX 		= 0.0,
    									float shadowDeltaY 		= 0.0,
    									float shadowBlur 		= 0.0,
    									float shadowIntensity 	= 0.0,
    									bool stroke 			= false,
    									float strokeColorR 		= 0.0,
    									float strokeColorG 		= 0.0,
    									float strokeColorB 		= 0.0,
    									float strokeSize 		= 0.0 )
    {
           JniMethodInfo methodInfo;
           if (! JniHelper::getStaticMethodInfo(methodInfo, "org/cocos2dx/lib/Cocos2dxBitmap", "createTextBitmapShadowStroke",
			   "([BLjava/lang/String;IFFFIIIZFFFZFFFF)V"))
           {
               CCLOG("%s %d: error to get methodInfo", __FILE__, __LINE__);
               return false;
           }
        
        
           // Do a full lookup for the font path using CCFileUtils in case the given font name is a relative path to a font file asset,
           // or the path has been mapped to a different location in the app package:
           std::string fullPathOrFontName = CCFileUtils::sharedFileUtils()-&gt;fullPathForFilename(pFontName);
        
		   // If the path name returned includes the 'assets' dir then that needs to be removed, because the android.content.Context
		   // requires this portion of the path to be omitted for assets inside the app package.
		   if (fullPathOrFontName.find("assets/") == 0)
		   {
               fullPathOrFontName = fullPathOrFontName.substr(strlen("assets/"));	// Chop out the 'assets/' portion of the path.
           }
           /**create bitmap
            * this method call Cococs2dx.createBitmap()(java code) to create the bitmap, the java code
            * will call Java_org_cocos2dx_lib_Cocos2dxBitmap_nativeInitBitmapDC() to init the width, height
            * and data.
            * use this approach to decrease the jni call number
           */
		

           //jstring jstrText = methodInfo.env-&gt;NewStringUTF(text);
		   //fix Android L  utf8 emoj erro
		   int strLen = strlen(text);
		   jbyteArray byteArray = methodInfo.env-&gt;NewByteArray(strLen);
		   methodInfo.env-&gt;SetByteArrayRegion(byteArray, 0, strLen, reinterpret_cast&lt;const jbyte*&gt;(text));

           jstring jstrFont = methodInfo.env-&gt;NewStringUTF(fullPathOrFontName.c_str());
		
		   methodInfo.env-&gt;CallStaticVoidMethod(methodInfo.classID, methodInfo.methodID, byteArray,
               jstrFont, (int)fontSize, textTintR, textTintG, textTintB, eAlignMask, nWidth, nHeight, shadow, shadowDeltaX, -shadowDeltaY, shadowBlur, stroke, strokeColorR, strokeColorG, strokeColorB, strokeSize);

           //methodInfo.env-&gt;DeleteLocalRef(jstrText);
		   methodInfo.env-&gt;DeleteLocalRef(byteArray);

           methodInfo.env-&gt;DeleteLocalRef(jstrFont);
           methodInfo.env-&gt;DeleteLocalRef(methodInfo.classID);
           return true;
    }


    bool getBitmapFromJava(const char *text, int nWidth, int nHeight, CCImage::ETextAlign eAlignMask, const char * pFontName, float fontSize)
    {
    	return  getBitmapFromJavaShadowStroke(	text, nWidth, nHeight, eAlignMask, pFontName, fontSize );
    }

    // ARGB -&gt; RGBA
    inline unsigned int swapAlpha(unsigned int value)
    {
        return ((value &lt;&lt; 8 &amp; 0xffffff00) | (value &gt;&gt; 24 &amp; 0x000000ff));
    }

public:
    int m_nWidth;
    int m_nHeight;
    unsigned char *m_pData;
    JNIEnv *env;
};

static BitmapDC&amp; sharedBitmapDC()
{
    static BitmapDC s_BmpDC;
    return s_BmpDC;
}

bool CCImage::initWithString(
                               const char *    pText, 
                               int             nWidth/* = 0*/, 
                               int             nHeight/* = 0*/,
                               ETextAlign      eAlignMask/* = kAlignCenter*/,
                               const char *    pFontName/* = nil*/,
                               int             nSize/* = 0*/)
{
    bool bRet = false;

    do 
    {
        CC_BREAK_IF(! pText);
        
        BitmapDC &amp;dc = sharedBitmapDC();

        CC_BREAK_IF(! dc.getBitmapFromJava(pText, nWidth, nHeight, eAlignMask, pFontName, nSize));

        // assign the dc.m_pData to m_pData in order to save time
        m_pData = dc.m_pData;
        CC_BREAK_IF(! m_pData);

        m_nWidth    = (short)dc.m_nWidth;
        m_nHeight   = (short)dc.m_nHeight;
        m_bHasAlpha = true;
        m_bPreMulti = true;
        m_nBitsPerComponent = 8;

        bRet = true;
    } while (0);

    return bRet;
}

bool CCImage::initWithStringShadowStroke(
                                         const char * pText,
                                         int         nWidth ,
                                         int         nHeight ,
                                         ETextAlign eAlignMask ,
                                         const char * pFontName ,
                                         int          nSize ,
                                         float        textTintR,
                                         float        textTintG,
                                         float        textTintB,
                                         bool shadow,
                                         float shadowOffsetX,
                                         float shadowOffsetY,
                                         float shadowOpacity,
                                         float shadowBlur,
                                         bool  stroke,
                                         float strokeR,
                                         float strokeG,
                                         float strokeB,
                                         float strokeSize)
{
	 bool bRet = false;
	    do
	    {
	        CC_BREAK_IF(! pText);

	        BitmapDC &amp;dc = sharedBitmapDC();


	        CC_BREAK_IF(! dc.getBitmapFromJavaShadowStroke(pText, nWidth, nHeight, eAlignMask, pFontName,
	        											   nSize, textTintR, textTintG, textTintB, shadow,
	        											   shadowOffsetX, shadowOffsetY, shadowBlur, shadowOpacity,
	        											   stroke, strokeR, strokeG, strokeB, strokeSize ));


	        // assign the dc.m_pData to m_pData in order to save time
	        m_pData = dc.m_pData;

	        CC_BREAK_IF(! m_pData);

	        m_nWidth    = (short)dc.m_nWidth;
	        m_nHeight   = (short)dc.m_nHeight;
	        m_bHasAlpha = true;
	        m_bPreMulti = true;
	        m_nBitsPerComponent = 8;

	        // swap the alpha channel (ARGB to RGBA)
	        swapAlphaChannel((unsigned int *)m_pData, (m_nWidth * m_nHeight) );

	        // ok
	        bRet = true;

	    } while (0);

	    return bRet;
}

NS_CC_END

// swap the alpha channel in an 32 bit image (from ARGB to RGBA)
void swapAlphaChannel(unsigned int *pImageMemory, unsigned int numPixels)
{
	for(int c = 0; c &lt; numPixels; ++c, ++pImageMemory)
	{
		// copy the current pixel
		unsigned int currenPixel =  (*pImageMemory);
		// swap channels and store back
		unsigned char *pSource = (unsigned char *) 	&amp;currenPixel;
		*pImageMemory = (pSource[0] &lt;&lt; 24) | (pSource[3]&lt;&lt;16) | (pSource[2]&lt;&lt;8) | pSource[1];
	}
}

// this method is called by Cocos2dxBitmap
extern "C"
{
    /**
    * this method is called by java code to init width, height and pixels data
    */
    JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxBitmap_nativeInitBitmapDC(JNIEnv*  env, jobject thiz, int width, int height, jbyteArray pixels)
    {
        int size = width * height * 4;
        cocos2d::BitmapDC&amp; bitmapDC = cocos2d::sharedBitmapDC();
        bitmapDC.m_nWidth = width;
        bitmapDC.m_nHeight = height;
        bitmapDC.m_pData = new unsigned char[size];
        env-&gt;GetByteArrayRegion(pixels, 0, size, (jbyte*)bitmapDC.m_pData);

        // swap data
        unsigned int *tempPtr = (unsigned int*)bitmapDC.m_pData;
        unsigned int tempdata = 0;
        for (int i = 0; i &lt; height; ++i)
        {
            for (int j = 0; j &lt; width; ++j)
            {
                tempdata = *tempPtr;
                *tempPtr++ = bitmapDC.swapAlpha(tempdata);
            }
        }
    }
};


</code></pre></div></div>

<p><code class="highlighter-rouge">cocos2dx\platform\android\jni\Java_org_cocos2dx_lib_Cocos2dxHelper.cpp</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#include &lt;stdlib.h&gt;
#include &lt;jni.h&gt;
#include &lt;android/log.h&gt;
#include &lt;string&gt;
#include "JniHelper.h"
#include "cocoa/CCString.h"
#include "Java_org_cocos2dx_lib_Cocos2dxHelper.h"


#define  LOG_TAG    "Java_org_cocos2dx_lib_Cocos2dxHelper.cpp"
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)

#define  CLASS_NAME "org/cocos2dx/lib/Cocos2dxHelper"

static EditTextCallback s_pfEditTextCallback = NULL;
static void* s_ctx = NULL;

using namespace cocos2d;
using namespace std;

string g_apkPath;

extern "C" {

    JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxHelper_nativeSetApkPath(JNIEnv*  env, jobject thiz, jstring apkPath) {
        g_apkPath = JniHelper::jstring2string(apkPath);
    }

    JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxHelper_nativeSetEditTextDialogResult(JNIEnv * env, jobject obj, jbyteArray text) {
        jsize  size = env-&gt;GetArrayLength(text);

        if (size &gt; 0) {
            jbyte * data = (jbyte*)env-&gt;GetByteArrayElements(text, 0);
            char* pBuf = (char*)malloc(size+1);
            if (pBuf != NULL) {
                memcpy(pBuf, data, size);
                pBuf[size] = '\0';
                // pass data to edittext's delegate
                if (s_pfEditTextCallback) s_pfEditTextCallback(pBuf, s_ctx);
                free(pBuf);
            }
            env-&gt;ReleaseByteArrayElements(text, data, 0);
        } else {
            if (s_pfEditTextCallback) s_pfEditTextCallback("", s_ctx);
        }
    }

}

const char * getApkPath() {
    return g_apkPath.c_str();
}

void showDialogJNI(const char * pszMsg, const char * pszTitle) {
    if (!pszMsg) {
        return;
    }

    JniMethodInfo t;
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "showDialog", "([B[B)V")) {

      

		

		int strLen1 = strlen(pszTitle);
		jbyteArray byteArray1 = t.env-&gt;NewByteArray(strLen1);
		t.env-&gt;SetByteArrayRegion(byteArray1, 0, strLen1, reinterpret_cast&lt;const jbyte*&gt;(pszTitle));

     


		int strLen2 = strlen(pszMsg);
		jbyteArray byteArray2 = t.env-&gt;NewByteArray(strLen2);
		t.env-&gt;SetByteArrayRegion(byteArray2, 0, strLen2, reinterpret_cast&lt;const jbyte*&gt;(pszMsg));

		t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, byteArray1, byteArray2);

		t.env-&gt;DeleteLocalRef(byteArray1);
		t.env-&gt;DeleteLocalRef(byteArray2);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

void showEditTextDialogJNI(const char* pszTitle, const char* pszMessage, int nInputMode, int nInputFlag, int nReturnType, int nMaxLength, EditTextCallback pfEditTextCallback, void* ctx) {
    if (pszMessage == NULL) {
        return;
    }

    s_pfEditTextCallback = pfEditTextCallback;
    s_ctx = ctx;

    JniMethodInfo t;
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "showEditTextDialog", "([B[BIIII)V")) {
        jstring stringArg1;

		int strLen1 = strlen(pszTitle);
		jbyteArray byteArray1 = t.env-&gt;NewByteArray(strLen1);
		t.env-&gt;SetByteArrayRegion(byteArray1, 0, strLen1, reinterpret_cast&lt;const jbyte*&gt;(pszTitle));




		int strLen2 = strlen(pszMessage);
		jbyteArray byteArray2 = t.env-&gt;NewByteArray(strLen2);
		t.env-&gt;SetByteArrayRegion(byteArray2, 0, strLen2, reinterpret_cast&lt;const jbyte*&gt;(pszMessage));

		t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, byteArray1, byteArray2, nInputMode, nInputFlag, nReturnType, nMaxLength);

		t.env-&gt;DeleteLocalRef(byteArray1);
		t.env-&gt;DeleteLocalRef(byteArray2);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

void terminateProcessJNI() {
    JniMethodInfo t;

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "terminateProcess", "()V")) {
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

std::string getPackageNameJNI() {
    JniMethodInfo t;
    std::string ret("");

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getCocos2dxPackageName", "()Ljava/lang/String;")) {
        jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
        ret = JniHelper::jstring2string(str);
        t.env-&gt;DeleteLocalRef(str);
    }
    return ret;
}

std::string getFileDirectoryJNI() {
    JniMethodInfo t;
    std::string ret("");

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getCocos2dxWritablePath", "()Ljava/lang/String;")) {
        jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
        ret = JniHelper::jstring2string(str);
        t.env-&gt;DeleteLocalRef(str);
    }
    
    return ret;
}

std::string getCurrentLanguageJNI() {
    JniMethodInfo t;
    std::string ret("");
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getCurrentLanguage", "()Ljava/lang/String;")) {
        jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
        ret = JniHelper::jstring2string(str);
        t.env-&gt;DeleteLocalRef(str);
    }

    return ret;
}

void enableAccelerometerJNI() {
    JniMethodInfo t;

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "enableAccelerometer", "()V")) {
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

void setAccelerometerIntervalJNI(float interval) {
    JniMethodInfo t;

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setAccelerometerInterval", "(F)V")) {
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, interval);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

void disableAccelerometerJNI() {
    JniMethodInfo t;

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "disableAccelerometer", "()V")) {
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID);
        t.env-&gt;DeleteLocalRef(t.classID);
    }
}

// functions for CCUserDefault
bool getBoolForKeyJNI(const char* pKey, bool defaultValue)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getBoolForKey", "(Ljava/lang/String;Z)Z")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        jboolean ret = t.env-&gt;CallStaticBooleanMethod(t.classID, t.methodID, stringArg, defaultValue);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
        
        return ret;
    }
    
    return defaultValue;
}

int getIntegerForKeyJNI(const char* pKey, int defaultValue)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getIntegerForKey", "(Ljava/lang/String;I)I")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        jint ret = t.env-&gt;CallStaticIntMethod(t.classID, t.methodID, stringArg, defaultValue);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
        
        return ret;
    }
    
    return defaultValue;
}

float getFloatForKeyJNI(const char* pKey, float defaultValue)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getFloatForKey", "(Ljava/lang/String;F)F")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        jfloat ret = t.env-&gt;CallStaticFloatMethod(t.classID, t.methodID, stringArg, defaultValue);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
        
        return ret;
    }
    
    return defaultValue;
}

double getDoubleForKeyJNI(const char* pKey, double defaultValue)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getDoubleForKey", "(Ljava/lang/String;D)D")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        jdouble ret = t.env-&gt;CallStaticDoubleMethod(t.classID, t.methodID, stringArg);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
        
        return ret;
    }
    
    return defaultValue;
}

std::string getStringForKeyJNI(const char* pKey, const char* defaultValue)
{
    JniMethodInfo t;
    std::string ret("");

    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getStringForKey", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")) {
        jstring stringArg1 = t.env-&gt;NewStringUTF(pKey);
        jstring stringArg2 = t.env-&gt;NewStringUTF(defaultValue);
        jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID, stringArg1, stringArg2);
        ret = JniHelper::jstring2string(str);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg1);
        t.env-&gt;DeleteLocalRef(stringArg2);
        t.env-&gt;DeleteLocalRef(str);
        
        return ret;
    }
    
    return defaultValue;
}

void setBoolForKeyJNI(const char* pKey, bool value)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setBoolForKey", "(Ljava/lang/String;Z)V")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, stringArg, value);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
    }
}

void setIntegerForKeyJNI(const char* pKey, int value)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setIntegerForKey", "(Ljava/lang/String;I)V")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, stringArg, value);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
    }
}

void setFloatForKeyJNI(const char* pKey, float value)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setFloatForKey", "(Ljava/lang/String;F)V")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, stringArg, value);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
    }
}

void setDoubleForKeyJNI(const char* pKey, double value)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setDoubleForKey", "(Ljava/lang/String;D)V")) {
        jstring stringArg = t.env-&gt;NewStringUTF(pKey);
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, stringArg, value);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg);
    }
}

void setStringForKeyJNI(const char* pKey, const char* value)
{
    JniMethodInfo t;
    
    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "setStringForKey", "(Ljava/lang/String;Ljava/lang/String;)V")) {
        jstring stringArg1 = t.env-&gt;NewStringUTF(pKey);
        jstring stringArg2 = t.env-&gt;NewStringUTF(value);
        t.env-&gt;CallStaticVoidMethod(t.classID, t.methodID, stringArg1, stringArg2);
        
        t.env-&gt;DeleteLocalRef(t.classID);
        t.env-&gt;DeleteLocalRef(stringArg1);
        t.env-&gt;DeleteLocalRef(stringArg2);
    }
}


</code></pre></div></div>

<p><code class="highlighter-rouge">cocos2dx\platform\android\java\src\org\cocos2dx\lib\Cocos2dxBitmap.java</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">/****************************************************************************</span>
<span class="n">Copyright</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="m">2010</span><span class="p">-</span><span class="m">2011</span> <span class="n">cocos2d</span><span class="p">-</span><span class="n">x</span><span class="p">.</span><span class="n">org</span>

<span class="n">http</span><span class="p">://</span><span class="n">www</span><span class="p">.</span><span class="n">cocos2d</span><span class="p">-</span><span class="n">x</span><span class="p">.</span><span class="n">org</span>

<span class="n">Permission</span> <span class="n">is</span> <span class="n">hereby</span> <span class="n">granted</span><span class="p">,</span> <span class="n">free</span> <span class="k">of</span> <span class="n">charge</span><span class="p">,</span> <span class="k">to</span> <span class="n">any</span> <span class="n">person</span> <span class="n">obtaining</span> <span class="n">a</span> <span class="n">copy</span>
<span class="k">of</span> <span class="n">this</span> <span class="n">software</span> <span class="k">and</span> <span class="n">associated</span> <span class="n">documentation</span> <span class="n">files</span> <span class="p">(</span><span class="n">the</span> <span class="s2">"Software"</span><span class="p">),</span> <span class="k">to</span> <span class="n">deal</span>
<span class="k">in</span> <span class="n">the</span> <span class="n">Software</span> <span class="n">without</span> <span class="n">restriction</span><span class="p">,</span> <span class="n">including</span> <span class="n">without</span> <span class="n">limitation</span> <span class="n">the</span> <span class="n">rights</span>
<span class="k">to</span> <span class="n">use</span><span class="p">,</span> <span class="n">copy</span><span class="p">,</span> <span class="n">modify</span><span class="p">,</span> <span class="n">merge</span><span class="p">,</span> <span class="nb">publish</span><span class="p">,</span> <span class="n">distribute</span><span class="p">,</span> <span class="n">sublicense</span><span class="p">,</span> <span class="k">and</span><span class="p">/</span><span class="k">or</span> <span class="n">sell</span>
<span class="n">copies</span> <span class="k">of</span> <span class="n">the</span> <span class="n">Software</span><span class="p">,</span> <span class="k">and</span> <span class="k">to</span> <span class="n">permit</span> <span class="n">persons</span> <span class="k">to</span> <span class="n">whom</span> <span class="n">the</span> <span class="n">Software</span> <span class="n">is</span>
<span class="n">furnished</span> <span class="k">to</span> <span class="k">do</span> <span class="n">so</span><span class="p">,</span> <span class="n">subject</span> <span class="k">to</span> <span class="n">the</span> <span class="n">following</span> <span class="n">conditions</span><span class="p">:</span>

<span class="n">The</span> <span class="n">above</span> <span class="n">copyright</span> <span class="n">notice</span> <span class="k">and</span> <span class="n">this</span> <span class="n">permission</span> <span class="n">notice</span> <span class="n">shall</span> <span class="n">be</span> <span class="n">included</span> <span class="k">in</span>
<span class="n">all</span> <span class="n">copies</span> <span class="k">or</span> <span class="n">substantial</span> <span class="n">portions</span> <span class="k">of</span> <span class="n">the</span> <span class="n">Software</span><span class="p">.</span>

<span class="n">THE</span> <span class="n">SOFTWARE</span> <span class="n">IS</span> <span class="n">PROVIDED</span> <span class="s2">"AS IS"</span><span class="p">,</span> <span class="n">WITHOUT</span> <span class="n">WARRANTY</span> <span class="k">OF</span> <span class="n">ANY</span> <span class="n">KIND</span><span class="p">,</span> <span class="n">EXPRESS</span> <span class="k">OR</span>
<span class="n">IMPLIED</span><span class="p">,</span> <span class="n">INCLUDING</span> <span class="n">BUT</span> <span class="k">NOT</span> <span class="n">LIMITED</span> <span class="k">TO</span> <span class="n">THE</span> <span class="n">WARRANTIES</span> <span class="k">OF</span> <span class="n">MERCHANTABILITY</span><span class="p">,</span>
<span class="n">FITNESS</span> <span class="n">FOR</span> <span class="n">A</span> <span class="n">PARTICULAR</span> <span class="n">PURPOSE</span> <span class="k">AND</span> <span class="n">NONINFRINGEMENT</span><span class="p">.</span> <span class="k">IN</span> <span class="n">NO</span> <span class="n">EVENT</span> <span class="n">SHALL</span> <span class="n">THE</span>
<span class="n">AUTHORS</span> <span class="k">OR</span> <span class="n">COPYRIGHT</span> <span class="n">HOLDERS</span> <span class="n">BE</span> <span class="n">LIABLE</span> <span class="n">FOR</span> <span class="n">ANY</span> <span class="n">CLAIM</span><span class="p">,</span> <span class="n">DAMAGES</span> <span class="k">OR</span> <span class="n">OTHER</span>
<span class="n">LIABILITY</span><span class="p">,</span> <span class="n">WHETHER</span> <span class="k">IN</span> <span class="n">AN</span> <span class="n">ACTION</span> <span class="k">OF</span> <span class="n">CONTRACT</span><span class="p">,</span> <span class="n">TORT</span> <span class="k">OR</span> <span class="n">OTHERWISE</span><span class="p">,</span> <span class="n">ARISING</span> <span class="k">FROM</span><span class="p">,</span>
<span class="n">OUT</span> <span class="k">OF</span> <span class="k">OR</span> <span class="k">IN</span> <span class="n">CONNECTION</span> <span class="k">WITH</span> <span class="n">THE</span> <span class="n">SOFTWARE</span> <span class="k">OR</span> <span class="n">THE</span> <span class="n">USE</span> <span class="k">OR</span> <span class="n">OTHER</span> <span class="n">DEALINGS</span> <span class="k">IN</span>
<span class="n">THE</span> <span class="n">SOFTWARE</span><span class="p">.</span>
 <span class="p">****************************************************************************/</span>
<span class="k">package</span> <span class="n">org</span><span class="p">.</span><span class="n">cocos2dx</span><span class="p">.</span><span class="n">lib</span><span class="p">;</span>

<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">nio</span><span class="p">.</span><span class="n">ByteBuffer</span><span class="p">;</span>
<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">nio</span><span class="p">.</span><span class="n">ByteOrder</span><span class="p">;</span>
<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">LinkedList</span><span class="p">;</span>

<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">Context</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Bitmap</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Canvas</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Color</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Paint</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Paint</span><span class="p">.</span><span class="n">Align</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Paint</span><span class="p">.</span><span class="n">FontMetricsInt</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Rect</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">graphics</span><span class="p">.</span><span class="n">Typeface</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">TextPaint</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">TextUtils</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">FloatMath</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">Log</span><span class="p">;</span>

<span class="k">public</span> <span class="n">class</span> <span class="n">Cocos2dxBitmap</span> <span class="p">{</span>
	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Constants</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="p">/*</span> <span class="n">The</span> <span class="n">values</span> <span class="n">are</span> <span class="n">the</span> <span class="n">same</span> <span class="k">as</span> <span class="n">cocos2dx</span><span class="p">/</span><span class="n">platform</span><span class="p">/</span><span class="n">CCImage</span><span class="p">.</span><span class="n">h</span><span class="p">.</span> <span class="p">*/</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">HORIZONTALALIGN_LEFT</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">HORIZONTALALIGN_RIGHT</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">HORIZONTALALIGN_CENTER</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">VERTICALALIGN_TOP</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">VERTICALALIGN_BOTTOM</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="n">VERTICALALIGN_CENTER</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Fields</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">Context</span> <span class="n">sContext</span><span class="p">;</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Constructors</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Getter</span> <span class="p">&amp;</span> <span class="n">Setter</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setContext</span><span class="p">(</span><span class="n">final</span> <span class="n">Context</span> <span class="n">pContext</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">sContext</span> <span class="p">=</span> <span class="n">pContext</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Methods</span> <span class="n">for</span><span class="p">/</span><span class="k">from</span> <span class="n">SuperClass</span><span class="p">/</span><span class="n">Interfaces</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Methods</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">native</span> <span class="n">void</span> <span class="n">nativeInitBitmapDC</span><span class="p">(</span><span class="n">final</span> <span class="n">int</span> <span class="n">pWidth</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pPixels</span><span class="p">);</span>

	<span class="p">/**</span>
	 <span class="p">*</span> <span class="p">@</span><span class="n">param</span> <span class="n">pWidth</span>
	 <span class="p">*</span>            <span class="n">the</span> <span class="n">width</span> <span class="k">to</span> <span class="n">draw</span><span class="p">,</span> <span class="n">it</span> <span class="n">can</span> <span class="n">be</span> <span class="m">0</span>
	 <span class="p">*</span> <span class="p">@</span><span class="n">param</span> <span class="n">pHeight</span>
	 <span class="p">*</span>            <span class="n">the</span> <span class="n">height</span> <span class="k">to</span> <span class="n">draw</span><span class="p">,</span> <span class="n">it</span> <span class="n">can</span> <span class="n">be</span> <span class="m">0</span>
	 <span class="p">*/</span>
	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">createTextBitmap</span><span class="p">(</span><span class="k">String</span> <span class="n">pString</span><span class="p">,</span> <span class="n">final</span> <span class="k">String</span> <span class="n">pFontName</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pFontSize</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pAlignment</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pWidth</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pHeight</span><span class="p">)</span> <span class="p">{</span>
		
		<span class="p">//</span>
		<span class="n">createTextBitmapShadowStroke</span><span class="p">(</span> <span class="n">pString</span><span class="p">.</span><span class="n">getBytes</span><span class="p">(),</span> <span class="n">pFontName</span><span class="p">,</span> <span class="n">pFontSize</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span>   	<span class="p">//</span> <span class="n">text</span> <span class="n">font</span> <span class="k">and</span> <span class="n">color</span>
									  <span class="n">pAlignment</span><span class="p">,</span> <span class="n">pWidth</span><span class="p">,</span> <span class="n">pHeight</span><span class="p">,</span>							<span class="p">//</span> <span class="n">alignment</span> <span class="k">and</span> <span class="n">size</span>
									  <span class="nb">false</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span> <span class="m">0.0f</span><span class="p">,</span>								<span class="p">//</span> <span class="n">no</span> <span class="n">shadow</span>
									  <span class="nb">false</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">,</span> <span class="m">1.0f</span><span class="p">);</span>						<span class="p">//</span> <span class="n">no</span> <span class="n">stroke</span>
									 
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">createTextBitmapShadowStroke</span><span class="p">(</span><span class="n">byte</span><span class="p">[]</span> <span class="n">bytes</span><span class="p">,</span>  <span class="n">final</span> <span class="k">String</span> <span class="n">pFontName</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pFontSize</span><span class="p">,</span>
													<span class="n">final</span> <span class="n">float</span> <span class="n">fontTintR</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">fontTintG</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">fontTintB</span><span class="p">,</span>
													<span class="n">final</span> <span class="n">int</span> <span class="n">pAlignment</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pWidth</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">final</span> <span class="k">boolean</span> <span class="n">shadow</span><span class="p">,</span>
													<span class="n">final</span> <span class="n">float</span> <span class="n">shadowDX</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">shadowDY</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">shadowBlur</span><span class="p">,</span> <span class="n">final</span> <span class="k">boolean</span> <span class="n">stroke</span><span class="p">,</span>
													<span class="n">final</span> <span class="n">float</span> <span class="n">strokeR</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">strokeG</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">strokeB</span><span class="p">,</span> <span class="n">final</span> <span class="n">float</span> <span class="n">strokeSize</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">String</span> <span class="n">pString</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span> <span class="p">==</span> <span class="n">null</span> <span class="p">||</span> <span class="n">bytes</span><span class="p">.</span><span class="n">length</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">pString</span> <span class="p">=</span> <span class="s2">""</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="n">pString</span> <span class="p">=</span> <span class="n">new</span> <span class="k">String</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
        <span class="p">}</span>
		
		<span class="n">final</span> <span class="n">int</span> <span class="n">horizontalAlignment</span> <span class="p">=</span> <span class="n">pAlignment</span> <span class="p">&amp;</span> <span class="m">0x0F</span><span class="p">;</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">verticalAlignment</span>   <span class="p">=</span> <span class="p">(</span><span class="n">pAlignment</span> <span class="p">&gt;&gt;</span> <span class="m">4</span><span class="p">)</span> <span class="p">&amp;</span> <span class="m">0x0F</span><span class="p">;</span>

		<span class="n">pString</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">refactorString</span><span class="p">(</span><span class="n">pString</span><span class="p">);</span>
		<span class="n">final</span> <span class="n">Paint</span> <span class="n">paint</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">newPaint</span><span class="p">(</span><span class="n">pFontName</span><span class="p">,</span> <span class="n">pFontSize</span><span class="p">,</span> <span class="n">horizontalAlignment</span><span class="p">);</span>
		
		<span class="p">//</span> <span class="k">set</span> <span class="n">the</span> <span class="n">paint</span> <span class="n">color</span>
		<span class="n">paint</span><span class="p">.</span><span class="n">setARGB</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)(</span><span class="m">255.0</span> <span class="p">*</span> <span class="n">fontTintR</span><span class="p">),</span> <span class="p">(</span><span class="n">int</span><span class="p">)(</span><span class="m">255.0</span> <span class="p">*</span> <span class="n">fontTintG</span><span class="p">),</span> <span class="p">(</span><span class="n">int</span><span class="p">)(</span><span class="m">255.0</span> <span class="p">*</span> <span class="n">fontTintB</span><span class="p">));</span>

		<span class="n">final</span> <span class="n">TextProperty</span> <span class="n">textProperty</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">computeTextProperty</span><span class="p">(</span><span class="n">pString</span><span class="p">,</span> <span class="n">pWidth</span><span class="p">,</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">paint</span><span class="p">);</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">bitmapTotalHeight</span> <span class="p">=</span> <span class="p">(</span><span class="n">pHeight</span> <span class="p">==</span> <span class="m">0</span> <span class="p">?</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mTotalHeight</span><span class="p">:</span> <span class="n">pHeight</span><span class="p">);</span>
		
		<span class="p">//</span> <span class="n">padding</span> <span class="n">needed</span> <span class="n">when</span> <span class="n">using</span> <span class="n">shadows</span> <span class="p">(</span><span class="k">not</span> <span class="n">used</span> <span class="n">otherwise</span><span class="p">)</span>
		<span class="n">float</span> <span class="n">bitmapPaddingX</span>   <span class="p">=</span> <span class="m">0.0f</span><span class="p">;</span>
		<span class="n">float</span> <span class="n">bitmapPaddingY</span>   <span class="p">=</span> <span class="m">0.0f</span><span class="p">;</span>
		<span class="n">float</span> <span class="n">renderTextDeltaX</span> <span class="p">=</span> <span class="m">0.0f</span><span class="p">;</span>
		<span class="n">float</span> <span class="n">renderTextDeltaY</span> <span class="p">=</span> <span class="m">0.0f</span><span class="p">;</span>
		
		<span class="k">if</span> <span class="p">(</span> <span class="n">shadow</span> <span class="p">)</span> <span class="p">{</span>

			<span class="n">int</span> <span class="n">shadowColor</span> <span class="p">=</span> <span class="m">0xff7d7d7d</span><span class="p">;</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setShadowLayer</span><span class="p">(</span><span class="n">shadowBlur</span><span class="p">,</span> <span class="n">shadowDX</span><span class="p">,</span> <span class="n">shadowDY</span><span class="p">,</span> <span class="n">shadowColor</span><span class="p">);</span>
	
			<span class="n">bitmapPaddingX</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">shadowDX</span><span class="p">);</span>
			<span class="n">bitmapPaddingY</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">shadowDY</span><span class="p">);</span>
					
			<span class="k">if</span> <span class="p">(</span> <span class="n">shadowDX</span> <span class="p">&lt;</span> <span class="m">0.0</span> <span class="p">)</span>
			<span class="p">{</span>
				<span class="n">renderTextDeltaX</span> <span class="p">=</span> <span class="n">bitmapPaddingX</span><span class="p">;</span>
			<span class="p">}</span>
			
			<span class="k">if</span> <span class="p">(</span> <span class="n">shadowDY</span> <span class="p">&lt;</span> <span class="m">0.0</span> <span class="p">)</span>
			<span class="p">{</span>
				<span class="n">renderTextDeltaY</span> <span class="p">=</span> 	<span class="n">bitmapPaddingY</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		
		<span class="n">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="p">=</span> <span class="n">Bitmap</span><span class="p">.</span><span class="n">createBitmap</span><span class="p">(</span><span class="n">textProperty</span><span class="p">.</span><span class="n">mMaxWidth</span> <span class="p">+</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span><span class="n">bitmapPaddingX</span><span class="p">,</span>
				<span class="n">bitmapTotalHeight</span> <span class="p">+</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span><span class="n">bitmapPaddingY</span><span class="p">,</span> <span class="n">Bitmap</span><span class="p">.</span><span class="n">Config</span><span class="p">.</span><span class="n">ARGB_8888</span><span class="p">);</span>
		
		<span class="n">final</span> <span class="n">Canvas</span> <span class="n">canvas</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Canvas</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>

		<span class="p">/*</span> <span class="n">Draw</span> <span class="k">string</span><span class="p">.</span> <span class="p">*/</span>
		<span class="n">final</span> <span class="n">FontMetricsInt</span> <span class="n">fontMetricsInt</span> <span class="p">=</span> <span class="n">paint</span><span class="p">.</span><span class="n">getFontMetricsInt</span><span class="p">();</span>
		
		<span class="n">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
		<span class="n">int</span> <span class="n">y</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">computeY</span><span class="p">(</span><span class="n">fontMetricsInt</span><span class="p">,</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mTotalHeight</span><span class="p">,</span> <span class="n">verticalAlignment</span><span class="p">);</span>
		
		<span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mLines</span><span class="p">;</span>
		
		<span class="n">for</span> <span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">line</span> <span class="p">:</span> <span class="n">lines</span><span class="p">)</span> <span class="p">{</span>
			
			<span class="n">x</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">computeX</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mMaxWidth</span><span class="p">,</span> <span class="n">horizontalAlignment</span><span class="p">);</span>
			<span class="n">canvas</span><span class="p">.</span><span class="n">drawText</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">x</span> <span class="p">+</span> <span class="n">renderTextDeltaX</span><span class="p">,</span> <span class="n">y</span> <span class="p">+</span> <span class="n">renderTextDeltaY</span><span class="p">,</span> <span class="n">paint</span><span class="p">);</span>
			<span class="n">y</span> <span class="p">+=</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mHeightPerLine</span><span class="p">;</span>
			
		<span class="p">}</span>
		 
		<span class="p">//</span> <span class="n">draw</span> <span class="n">again</span> <span class="k">with</span> <span class="n">stroke</span> <span class="n">on</span> <span class="k">if</span> <span class="n">needed</span> 
		<span class="k">if</span> <span class="p">(</span> <span class="n">stroke</span> <span class="p">)</span> <span class="p">{</span>
			
			<span class="n">final</span> <span class="n">Paint</span> <span class="n">paintStroke</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">newPaint</span><span class="p">(</span><span class="n">pFontName</span><span class="p">,</span> <span class="n">pFontSize</span><span class="p">,</span> <span class="n">horizontalAlignment</span><span class="p">);</span>
			<span class="n">paintStroke</span><span class="p">.</span><span class="n">setStyle</span><span class="p">(</span><span class="n">Paint</span><span class="p">.</span><span class="n">Style</span><span class="p">.</span><span class="n">STROKE</span><span class="p">);</span>
			<span class="n">paintStroke</span><span class="p">.</span><span class="n">setStrokeWidth</span><span class="p">(</span><span class="n">strokeSize</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">);</span>
			<span class="n">paintStroke</span><span class="p">.</span><span class="n">setARGB</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span><span class="n">strokeR</span> <span class="p">*</span> <span class="m">255</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span><span class="n">strokeG</span> <span class="p">*</span> <span class="m">255</span><span class="p">,</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span><span class="n">strokeB</span> <span class="p">*</span> <span class="m">255</span><span class="p">);</span>
			
			<span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
			<span class="n">y</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">computeY</span><span class="p">(</span><span class="n">fontMetricsInt</span><span class="p">,</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mTotalHeight</span><span class="p">,</span> <span class="n">verticalAlignment</span><span class="p">);</span>
			<span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">lines2</span> <span class="p">=</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mLines</span><span class="p">;</span>
			
			<span class="n">for</span> <span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">line</span> <span class="p">:</span> <span class="n">lines2</span><span class="p">)</span> <span class="p">{</span>
				
				<span class="n">x</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">computeX</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mMaxWidth</span><span class="p">,</span> <span class="n">horizontalAlignment</span><span class="p">);</span>
				<span class="n">canvas</span><span class="p">.</span><span class="n">drawText</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">x</span> <span class="p">+</span> <span class="n">renderTextDeltaX</span><span class="p">,</span> <span class="n">y</span> <span class="p">+</span> <span class="n">renderTextDeltaY</span><span class="p">,</span> <span class="n">paintStroke</span><span class="p">);</span>
				<span class="n">y</span> <span class="p">+=</span> <span class="n">textProperty</span><span class="p">.</span><span class="n">mHeightPerLine</span><span class="p">;</span>
				
			<span class="p">}</span>
			
		<span class="p">}</span>
		
		<span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">initNativeObject</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">Paint</span> <span class="n">newPaint</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pFontName</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pFontSize</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pHorizontalAlignment</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="n">Paint</span> <span class="n">paint</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Paint</span><span class="p">();</span>
		<span class="n">paint</span><span class="p">.</span><span class="n">setColor</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">WHITE</span><span class="p">);</span>
		<span class="n">paint</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="n">pFontSize</span><span class="p">);</span> 
		<span class="n">paint</span><span class="p">.</span><span class="n">setAntiAlias</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>

		<span class="p">/*</span> <span class="k">Set</span> <span class="n">type</span> <span class="n">face</span> <span class="n">for</span> <span class="n">paint</span><span class="p">,</span> <span class="n">now</span> <span class="n">it</span> <span class="n">support</span> <span class="p">.</span><span class="n">ttf</span> <span class="n">file</span><span class="p">.</span> <span class="p">*/</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">pFontName</span><span class="p">.</span><span class="nf">endsWith</span><span class="p">(</span><span class="s2">".ttf"</span><span class="p">))</span> <span class="p">{</span>
			<span class="n">try</span> <span class="p">{</span>
				<span class="n">final</span> <span class="n">Typeface</span> <span class="n">typeFace</span> <span class="p">=</span> <span class="n">Cocos2dxTypefaces</span><span class="p">.</span><span class="n">get</span><span class="p">(</span>
						<span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">sContext</span><span class="p">,</span> <span class="n">pFontName</span><span class="p">);</span>
				<span class="n">paint</span><span class="p">.</span><span class="n">setTypeface</span><span class="p">(</span><span class="n">typeFace</span><span class="p">);</span>
			<span class="p">}</span> <span class="n">catch</span> <span class="p">(</span><span class="n">final</span> <span class="n">Exception</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">Log</span><span class="p">.</span><span class="n">e</span><span class="p">(</span><span class="s2">"Cocos2dxBitmap"</span><span class="p">,</span> <span class="s2">"error to create ttf type face: "</span>
						<span class="p">+</span> <span class="n">pFontName</span><span class="p">);</span>

				<span class="p">/*</span> <span class="n">The</span> <span class="n">file</span> <span class="n">may</span> <span class="k">not</span> <span class="n">find</span><span class="p">,</span> <span class="n">use</span> <span class="nf">system</span> <span class="n">font</span><span class="p">.</span> <span class="p">*/</span>
				<span class="n">paint</span><span class="p">.</span><span class="n">setTypeface</span><span class="p">(</span><span class="n">Typeface</span><span class="p">.</span><span class="nb">create</span><span class="p">(</span><span class="n">pFontName</span><span class="p">,</span> <span class="n">Typeface</span><span class="p">.</span><span class="n">NORMAL</span><span class="p">));</span>
			<span class="p">}</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setTypeface</span><span class="p">(</span><span class="n">Typeface</span><span class="p">.</span><span class="nb">create</span><span class="p">(</span><span class="n">pFontName</span><span class="p">,</span> <span class="n">Typeface</span><span class="p">.</span><span class="n">NORMAL</span><span class="p">));</span>
		<span class="p">}</span>

		<span class="n">switch</span> <span class="p">(</span><span class="n">pHorizontalAlignment</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_CENTER</span><span class="p">:</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setTextAlign</span><span class="p">(</span><span class="n">Align</span><span class="p">.</span><span class="n">CENTER</span><span class="p">);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_RIGHT</span><span class="p">:</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setTextAlign</span><span class="p">(</span><span class="n">Align</span><span class="p">.</span><span class="n">RIGHT</span><span class="p">);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_LEFT</span><span class="p">:</span>
		<span class="n">default</span><span class="p">:</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setTextAlign</span><span class="p">(</span><span class="n">Align</span><span class="p">.</span><span class="n">LEFT</span><span class="p">);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">paint</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="n">private</span> <span class="n">static</span> <span class="n">TextProperty</span> <span class="n">computeTextProperty</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pString</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pWidth</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pHeight</span><span class="p">,</span> <span class="n">final</span> <span class="n">Paint</span> <span class="n">pPaint</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="n">FontMetricsInt</span> <span class="n">fm</span> <span class="p">=</span> <span class="n">pPaint</span><span class="p">.</span><span class="n">getFontMetricsInt</span><span class="p">();</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">h</span> <span class="p">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="n">Math</span><span class="p">.</span><span class="nb">ceil</span><span class="p">(</span><span class="n">fm</span><span class="p">.</span><span class="n">bottom</span> <span class="p">-</span> <span class="n">fm</span><span class="p">.</span><span class="n">top</span><span class="p">);</span>
		<span class="n">int</span> <span class="n">maxContentWidth</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

		<span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">splitString</span><span class="p">(</span><span class="n">pString</span><span class="p">,</span> <span class="n">pWidth</span><span class="p">,</span>
				<span class="n">pHeight</span><span class="p">,</span> <span class="n">pPaint</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">pWidth</span> <span class="c1">!= 0) {
</span>			<span class="n">maxContentWidth</span> <span class="p">=</span> <span class="n">pWidth</span><span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="p">/*</span> <span class="n">Compute</span> <span class="n">the</span> <span class="k">max</span> <span class="n">width</span><span class="p">.</span> <span class="p">*/</span>
			<span class="n">int</span> <span class="n">temp</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
			<span class="n">for</span> <span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">line</span> <span class="p">:</span> <span class="n">lines</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">temp</span> <span class="p">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="n">FloatMath</span><span class="p">.</span><span class="nb">ceil</span><span class="p">(</span><span class="n">pPaint</span><span class="p">.</span><span class="n">measureText</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span>
						<span class="n">line</span><span class="p">.</span><span class="n">length</span><span class="p">()));</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">temp</span> <span class="p">&gt;</span> <span class="n">maxContentWidth</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">maxContentWidth</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">new</span> <span class="n">TextProperty</span><span class="p">(</span><span class="n">maxContentWidth</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">lines</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">int</span> <span class="n">computeX</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pText</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pMaxWidth</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pHorizontalAlignment</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">int</span> <span class="n">ret</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

		<span class="n">switch</span> <span class="p">(</span><span class="n">pHorizontalAlignment</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_CENTER</span><span class="p">:</span>
			<span class="n">ret</span> <span class="p">=</span> <span class="n">pMaxWidth</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_RIGHT</span><span class="p">:</span>
			<span class="n">ret</span> <span class="p">=</span> <span class="n">pMaxWidth</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">HORIZONTALALIGN_LEFT</span><span class="p">:</span>
		<span class="n">default</span><span class="p">:</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">ret</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">int</span> <span class="n">computeY</span><span class="p">(</span><span class="n">final</span> <span class="n">FontMetricsInt</span> <span class="n">pFontMetricsInt</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pConstrainHeight</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pTotalHeight</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pVerticalAlignment</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="n">pFontMetricsInt</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">pConstrainHeight</span> <span class="p">&gt;</span> <span class="n">pTotalHeight</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">switch</span> <span class="p">(</span><span class="n">pVerticalAlignment</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">case</span> <span class="n">VERTICALALIGN_TOP</span><span class="p">:</span>
				<span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="n">pFontMetricsInt</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="n">VERTICALALIGN_CENTER</span><span class="p">:</span>
				<span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="n">pFontMetricsInt</span><span class="p">.</span><span class="n">top</span> <span class="p">+</span> <span class="p">(</span><span class="n">pConstrainHeight</span> <span class="p">-</span> <span class="n">pTotalHeight</span><span class="p">)</span>
						<span class="p">/</span> <span class="m">2</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="n">VERTICALALIGN_BOTTOM</span><span class="p">:</span>
				<span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="n">pFontMetricsInt</span><span class="p">.</span><span class="n">top</span> <span class="p">+</span> <span class="p">(</span><span class="n">pConstrainHeight</span> <span class="p">-</span> <span class="n">pTotalHeight</span><span class="p">);</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="n">default</span><span class="p">:</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">y</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="p">/*</span>
	 <span class="p">*</span> <span class="k">If</span> <span class="n">maxWidth</span> <span class="k">or</span> <span class="n">maxHeight</span> <span class="n">is</span> <span class="k">not</span> <span class="m">0</span><span class="p">,</span> <span class="n">split</span> <span class="n">the</span> <span class="k">string</span> <span class="k">to</span> <span class="n">fix</span> <span class="n">the</span> <span class="n">maxWidth</span>
	 <span class="p">*</span> <span class="k">and</span> <span class="n">maxHeight</span><span class="p">.</span>
	 <span class="p">*/</span>
	<span class="n">private</span> <span class="n">static</span> <span class="k">String</span><span class="p">[]</span> <span class="n">splitString</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pString</span><span class="p">,</span>
			<span class="n">final</span> <span class="n">int</span> <span class="n">pMaxWidth</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pMaxHeight</span><span class="p">,</span> <span class="n">final</span> <span class="n">Paint</span> <span class="n">pPaint</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">pString</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"</span><span class="se">\\</span><span class="s2">n"</span><span class="p">);</span>
		<span class="k">String</span><span class="p">[]</span> <span class="n">ret</span> <span class="p">=</span> <span class="n">null</span><span class="p">;</span>
		<span class="n">final</span> <span class="n">FontMetricsInt</span> <span class="n">fm</span> <span class="p">=</span> <span class="n">pPaint</span><span class="p">.</span><span class="n">getFontMetricsInt</span><span class="p">();</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">heightPerLine</span> <span class="p">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="n">Math</span><span class="p">.</span><span class="nb">ceil</span><span class="p">(</span><span class="n">fm</span><span class="p">.</span><span class="n">bottom</span> <span class="p">-</span> <span class="n">fm</span><span class="p">.</span><span class="n">top</span><span class="p">);</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">maxLines</span> <span class="p">=</span> <span class="n">pMaxHeight</span> <span class="p">/</span> <span class="n">heightPerLine</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">pMaxWidth</span> <span class="c1">!= 0) {
</span>			<span class="n">final</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;</span> <span class="n">strList</span> <span class="p">=</span> <span class="n">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;();</span>
			<span class="n">for</span> <span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">line</span> <span class="p">:</span> <span class="n">lines</span><span class="p">)</span> <span class="p">{</span>
				<span class="p">/*</span>
				 <span class="p">*</span> <span class="n">The</span> <span class="n">width</span> <span class="k">of</span> <span class="n">line</span> <span class="n">is</span> <span class="n">exceed</span> <span class="n">maxWidth</span><span class="p">,</span> <span class="n">should</span> <span class="n">divide</span> <span class="n">it</span> <span class="n">into</span>
				 <span class="p">*</span> <span class="n">two</span> <span class="k">or</span> <span class="n">more</span> <span class="n">lines</span><span class="p">.</span>
				 <span class="p">*/</span>
				<span class="n">final</span> <span class="n">int</span> <span class="n">lineWidth</span> <span class="p">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="n">FloatMath</span><span class="p">.</span><span class="nb">ceil</span><span class="p">(</span><span class="n">pPaint</span>
						<span class="p">.</span><span class="n">measureText</span><span class="p">(</span><span class="n">line</span><span class="p">));</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">lineWidth</span> <span class="p">&gt;</span> <span class="n">pMaxWidth</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">strList</span><span class="p">.</span><span class="n">addAll</span><span class="p">(</span><span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">divideStringWithMaxWidth</span><span class="p">(</span>
							<span class="n">line</span><span class="p">,</span> <span class="n">pMaxWidth</span><span class="p">,</span> <span class="n">pPaint</span><span class="p">));</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
				<span class="p">}</span>

				<span class="p">/*</span> <span class="n">Should</span> <span class="k">not</span> <span class="n">exceed</span> <span class="n">the</span> <span class="k">max</span> <span class="n">height</span><span class="p">.</span> <span class="p">*/</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">maxLines</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">strList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">&gt;=</span> <span class="n">maxLines</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="p">/*</span> <span class="n">Remove</span> <span class="n">exceeding</span> <span class="n">lines</span><span class="p">.</span> <span class="p">*/</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">maxLines</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">strList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">&gt;</span> <span class="n">maxLines</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">while</span> <span class="p">(</span><span class="n">strList</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="p">&gt;</span> <span class="n">maxLines</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">strList</span><span class="p">.</span><span class="n">removeLast</span><span class="p">();</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="n">ret</span> <span class="p">=</span> <span class="n">new</span> <span class="k">String</span><span class="p">[</span><span class="n">strList</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
			<span class="n">strList</span><span class="p">.</span><span class="n">toArray</span><span class="p">(</span><span class="n">ret</span><span class="p">);</span>
		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pMaxHeight</span> <span class="c1">!= 0 &amp;&amp; lines.length &gt; maxLines) {
</span>			<span class="p">/*</span> <span class="n">Remove</span> <span class="n">exceeding</span> <span class="n">lines</span><span class="p">.</span> <span class="p">*/</span>
			<span class="n">final</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;</span> <span class="n">strList</span> <span class="p">=</span> <span class="n">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;();</span>
			<span class="n">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">maxLines</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="p">{</span>
				<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
			<span class="p">}</span>
			<span class="n">ret</span> <span class="p">=</span> <span class="n">new</span> <span class="k">String</span><span class="p">[</span><span class="n">strList</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
			<span class="n">strList</span><span class="p">.</span><span class="n">toArray</span><span class="p">(</span><span class="n">ret</span><span class="p">);</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="n">ret</span> <span class="p">=</span> <span class="n">lines</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">ret</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;</span> <span class="n">divideStringWithMaxWidth</span><span class="p">(</span>
			<span class="n">final</span> <span class="k">String</span> <span class="n">pString</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pMaxWidth</span><span class="p">,</span> <span class="n">final</span> <span class="n">Paint</span> <span class="n">pPaint</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="n">int</span> <span class="n">charLength</span> <span class="p">=</span> <span class="n">pString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
		<span class="n">int</span> <span class="n">start</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
		<span class="n">int</span> <span class="n">tempWidth</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
		<span class="n">final</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;</span> <span class="n">strList</span> <span class="p">=</span> <span class="n">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="k">String</span><span class="p">&gt;();</span>

		<span class="p">/*</span> <span class="k">Break</span> <span class="n">a</span> <span class="k">String</span> <span class="n">into</span> <span class="k">String</span><span class="p">[]</span> <span class="n">by</span> <span class="n">the</span> <span class="n">width</span> <span class="p">&amp;</span> <span class="n">should</span> <span class="n">wrap</span> <span class="n">the</span> <span class="n">word</span><span class="p">.</span> <span class="p">*/</span>
		<span class="n">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">charLength</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">tempWidth</span> <span class="p">=</span> <span class="p">(</span><span class="n">int</span><span class="p">)</span> <span class="n">FloatMath</span><span class="p">.</span><span class="nb">ceil</span><span class="p">(</span><span class="n">pPaint</span><span class="p">.</span><span class="n">measureText</span><span class="p">(</span><span class="n">pString</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span>
					<span class="n">i</span><span class="p">));</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">tempWidth</span> <span class="p">&gt;=</span> <span class="n">pMaxWidth</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">final</span> <span class="n">int</span> <span class="n">lastIndexOfSpace</span> <span class="p">=</span> <span class="n">pString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
						<span class="p">.</span><span class="n">lastIndexOf</span><span class="p">(</span><span class="s2">" "</span><span class="p">);</span>

				<span class="k">if</span> <span class="p">(</span><span class="n">lastIndexOfSpace</span> <span class="c1">!= -1 &amp;&amp; lastIndexOfSpace &gt; start) {
</span>					<span class="p">/*</span> <span class="n">Should</span> <span class="n">wrap</span> <span class="n">the</span> <span class="n">word</span><span class="p">.</span> <span class="p">*/</span>
					<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">lastIndexOfSpace</span><span class="p">));</span>
					<span class="n">i</span> <span class="p">=</span> <span class="n">lastIndexOfSpace</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span> <span class="p">//</span> <span class="n">skip</span> <span class="n">space</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="p">/*</span> <span class="n">Should</span> <span class="k">not</span> <span class="n">exceed</span> <span class="n">the</span> <span class="n">width</span><span class="p">.</span> <span class="p">*/</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">tempWidth</span> <span class="p">&gt;</span> <span class="n">pMaxWidth</span><span class="p">)</span> <span class="p">{</span>
						<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">));</span>
						<span class="p">/*</span> <span class="n">Compute</span> <span class="k">from</span> <span class="n">previous</span> <span class="n">char</span><span class="p">.</span> <span class="p">*/</span>
						<span class="p">--</span><span class="n">i</span><span class="p">;</span>
					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
						<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="p">/*</span> <span class="n">Remove</span> <span class="n">spaces</span> <span class="n">at</span> <span class="n">the</span> <span class="n">beginning</span> <span class="k">of</span> <span class="n">a</span> <span class="n">new</span> <span class="n">line</span><span class="p">.</span> <span class="p">*/</span>
				<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="n">charLength</span> <span class="p">&amp;&amp;</span> <span class="n">pString</span><span class="p">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="p">==</span> <span class="s1">' '</span><span class="p">)</span> <span class="p">{</span>
					<span class="p">++</span><span class="n">i</span><span class="p">;</span>
				<span class="p">}</span>

				<span class="n">start</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="p">/*</span> <span class="n">Add</span> <span class="n">the</span> <span class="n">last</span> <span class="n">chars</span><span class="p">.</span> <span class="p">*/</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="p">&lt;</span> <span class="n">charLength</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">strList</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pString</span><span class="p">.</span><span class="n">substring</span><span class="p">(</span><span class="n">start</span><span class="p">));</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">strList</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="k">String</span> <span class="n">refactorString</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pString</span><span class="p">)</span> <span class="p">{</span>
		<span class="p">/*</span> <span class="n">Avoid</span> <span class="n">error</span> <span class="n">when</span> <span class="n">content</span> <span class="n">is</span> <span class="s2">""</span><span class="p">.</span> <span class="p">*/</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">pString</span><span class="p">.</span><span class="n">compareTo</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">return</span> <span class="s2">" "</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="p">/*</span>
		 <span class="p">*</span> <span class="k">If</span> <span class="n">the</span> <span class="n">font</span> <span class="k">of</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span> <span class="n">is</span> <span class="s2">""</span> <span class="k">or</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="n">insert</span> <span class="s2">" "</span> <span class="k">in</span> <span class="n">front</span> <span class="k">of</span> <span class="n">it</span><span class="p">.</span> <span class="n">For</span>
		 <span class="p">*</span> <span class="n">example</span><span class="p">:</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">abc"</span> <span class="p">-&gt;</span> <span class="s2">" </span><span class="se">\n</span><span class="s2">abc"</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">abc</span><span class="se">\n\n</span><span class="s2">"</span> <span class="p">-&gt;</span> <span class="s2">" </span><span class="se">\n</span><span class="s2">abc</span><span class="se">\n</span><span class="s2"> </span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span>
		 <span class="p">*/</span>
		<span class="n">final</span> <span class="n">StringBuilder</span> <span class="n">strBuilder</span> <span class="p">=</span> <span class="n">new</span> <span class="n">StringBuilder</span><span class="p">(</span><span class="n">pString</span><span class="p">);</span>
		<span class="n">int</span> <span class="n">start</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
		<span class="n">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">);</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">index</span> <span class="c1">!= -1) {
</span>			<span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">charAt</span><span class="p">(</span><span class="n">index</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="s1">'\n'</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">strBuilder</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="s2">" "</span><span class="p">);</span>
				<span class="n">start</span> <span class="p">=</span> <span class="n">index</span> <span class="p">+</span> <span class="m">2</span><span class="p">;</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="n">start</span> <span class="p">=</span> <span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">start</span> <span class="p">&gt;</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="p">||</span> <span class="n">index</span> <span class="p">==</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">length</span><span class="p">())</span> <span class="p">{</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="n">index</span> <span class="p">=</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">indexOf</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">,</span> <span class="n">start</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">strBuilder</span><span class="p">.</span><span class="n">toString</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">void</span> <span class="n">initNativeObject</span><span class="p">(</span><span class="n">final</span> <span class="n">Bitmap</span> <span class="n">pBitmap</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pixels</span> <span class="p">=</span> <span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">getPixels</span><span class="p">(</span><span class="n">pBitmap</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">pixels</span> <span class="p">==</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">nativeInitBitmapDC</span><span class="p">(</span><span class="n">pBitmap</span><span class="p">.</span><span class="n">getWidth</span><span class="p">(),</span>
				<span class="n">pBitmap</span><span class="p">.</span><span class="n">getHeight</span><span class="p">(),</span> <span class="n">pixels</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">getPixels</span><span class="p">(</span><span class="n">final</span> <span class="n">Bitmap</span> <span class="n">pBitmap</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">pBitmap</span> <span class="c1">!= null) {
</span>			<span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pixels</span> <span class="p">=</span> <span class="n">new</span> <span class="n">byte</span><span class="p">[</span><span class="n">pBitmap</span><span class="p">.</span><span class="n">getWidth</span><span class="p">()</span>
					<span class="p">*</span> <span class="n">pBitmap</span><span class="p">.</span><span class="n">getHeight</span><span class="p">()</span> <span class="p">*</span> <span class="m">4</span><span class="p">];</span>
			<span class="n">final</span> <span class="n">ByteBuffer</span> <span class="n">buf</span> <span class="p">=</span> <span class="n">ByteBuffer</span><span class="p">.</span><span class="n">wrap</span><span class="p">(</span><span class="n">pixels</span><span class="p">);</span>
			<span class="n">buf</span><span class="p">.</span><span class="n">order</span><span class="p">(</span><span class="n">ByteOrder</span><span class="p">.</span><span class="n">nativeOrder</span><span class="p">());</span>
			<span class="n">pBitmap</span><span class="p">.</span><span class="n">copyPixelsToBuffer</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
			<span class="n">return</span> <span class="n">pixels</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">return</span> <span class="n">null</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getFontSizeAccordingHeight</span><span class="p">(</span><span class="n">int</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Paint</span> <span class="n">paint</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Paint</span><span class="p">();</span>
		<span class="n">Rect</span> <span class="n">bounds</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Rect</span><span class="p">();</span>

		<span class="n">paint</span><span class="p">.</span><span class="n">setTypeface</span><span class="p">(</span><span class="n">Typeface</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">);</span>
		<span class="n">int</span> <span class="n">incr_text_size</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
		<span class="k">boolean</span> <span class="n">found_desired_size</span> <span class="p">=</span> <span class="nb">false</span><span class="p">;</span>

		<span class="k">while</span> <span class="p">(</span><span class="c1">!found_desired_size) {
</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="n">incr_text_size</span><span class="p">);</span>
			<span class="k">String</span> <span class="n">text</span> <span class="p">=</span> <span class="s2">"SghMNy"</span><span class="p">;</span>
			<span class="n">paint</span><span class="p">.</span><span class="n">getTextBounds</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">text</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">bounds</span><span class="p">);</span>

			<span class="n">incr_text_size</span><span class="p">++;</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="p">-</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span><span class="p">()</span> <span class="p">&lt;=</span> <span class="m">2</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">found_desired_size</span> <span class="p">=</span> <span class="nb">true</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="n">Log</span><span class="p">.</span><span class="n">d</span><span class="p">(</span><span class="s2">"font size"</span><span class="p">,</span> <span class="s2">"incr size:"</span> <span class="p">+</span> <span class="n">incr_text_size</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">return</span> <span class="n">incr_text_size</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="k">String</span> <span class="n">getStringWithEllipsis</span><span class="p">(</span><span class="k">String</span> <span class="n">pString</span><span class="p">,</span> <span class="n">float</span> <span class="n">width</span><span class="p">,</span>
			<span class="n">float</span> <span class="n">fontSize</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">TextUtils</span><span class="p">.</span><span class="n">isEmpty</span><span class="p">(</span><span class="n">pString</span><span class="p">))</span> <span class="p">{</span>
			<span class="n">return</span> <span class="s2">""</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">TextPaint</span> <span class="n">paint</span> <span class="p">=</span> <span class="n">new</span> <span class="n">TextPaint</span><span class="p">();</span>
		<span class="n">paint</span><span class="p">.</span><span class="n">setTypeface</span><span class="p">(</span><span class="n">Typeface</span><span class="p">.</span><span class="n">DEFAULT</span><span class="p">);</span>
		<span class="n">paint</span><span class="p">.</span><span class="n">setTextSize</span><span class="p">(</span><span class="n">fontSize</span><span class="p">);</span>

		<span class="n">return</span> <span class="n">TextUtils</span><span class="p">.</span><span class="n">ellipsize</span><span class="p">(</span><span class="n">pString</span><span class="p">,</span> <span class="n">paint</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span>
				<span class="n">TextUtils</span><span class="p">.</span><span class="n">TruncateAt</span><span class="p">.</span><span class="k">END</span><span class="p">).</span><span class="n">toString</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Inner</span> <span class="k">and</span> <span class="n">Anonymous</span> <span class="n">Classes</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">class</span> <span class="n">TextProperty</span> <span class="p">{</span>
		<span class="p">/**</span> <span class="n">The</span> <span class="k">max</span> <span class="n">width</span> <span class="k">of</span> <span class="n">lines</span><span class="p">.</span> <span class="p">*/</span>
		<span class="n">private</span> <span class="n">final</span> <span class="n">int</span> <span class="n">mMaxWidth</span><span class="p">;</span>
		<span class="p">/**</span> <span class="n">The</span> <span class="n">height</span> <span class="k">of</span> <span class="n">all</span> <span class="n">lines</span><span class="p">.</span> <span class="p">*/</span>
		<span class="n">private</span> <span class="n">final</span> <span class="n">int</span> <span class="n">mTotalHeight</span><span class="p">;</span>
		<span class="n">private</span> <span class="n">final</span> <span class="n">int</span> <span class="n">mHeightPerLine</span><span class="p">;</span>
		<span class="n">private</span> <span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">mLines</span><span class="p">;</span>

		<span class="n">TextProperty</span><span class="p">(</span><span class="n">final</span> <span class="n">int</span> <span class="n">pMaxWidth</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pHeightPerLine</span><span class="p">,</span>
				<span class="n">final</span> <span class="k">String</span><span class="p">[]</span> <span class="n">pLines</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">this</span><span class="p">.</span><span class="n">mMaxWidth</span> <span class="p">=</span> <span class="n">pMaxWidth</span><span class="p">;</span>
			<span class="n">this</span><span class="p">.</span><span class="n">mHeightPerLine</span> <span class="p">=</span> <span class="n">pHeightPerLine</span><span class="p">;</span>
			<span class="n">this</span><span class="p">.</span><span class="n">mTotalHeight</span> <span class="p">=</span> <span class="n">pHeightPerLine</span> <span class="p">*</span> <span class="n">pLines</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
			<span class="n">this</span><span class="p">.</span><span class="n">mLines</span> <span class="p">=</span> <span class="n">pLines</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<p><code class="highlighter-rouge">cocos2dx\platform\android\java\src\org\cocos2dx\lib\Cocos2dxHelper.java</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">/****************************************************************************</span>
<span class="n">Copyright</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="m">2010</span><span class="p">-</span><span class="m">2013</span> <span class="n">cocos2d</span><span class="p">-</span><span class="n">x</span><span class="p">.</span><span class="n">org</span>

<span class="n">http</span><span class="p">://</span><span class="n">www</span><span class="p">.</span><span class="n">cocos2d</span><span class="p">-</span><span class="n">x</span><span class="p">.</span><span class="n">org</span>

<span class="n">Permission</span> <span class="n">is</span> <span class="n">hereby</span> <span class="n">granted</span><span class="p">,</span> <span class="n">free</span> <span class="k">of</span> <span class="n">charge</span><span class="p">,</span> <span class="k">to</span> <span class="n">any</span> <span class="n">person</span> <span class="n">obtaining</span> <span class="n">a</span> <span class="n">copy</span>
<span class="k">of</span> <span class="n">this</span> <span class="n">software</span> <span class="k">and</span> <span class="n">associated</span> <span class="n">documentation</span> <span class="n">files</span> <span class="p">(</span><span class="n">the</span> <span class="s2">"Software"</span><span class="p">),</span> <span class="k">to</span> <span class="n">deal</span>
<span class="k">in</span> <span class="n">the</span> <span class="n">Software</span> <span class="n">without</span> <span class="n">restriction</span><span class="p">,</span> <span class="n">including</span> <span class="n">without</span> <span class="n">limitation</span> <span class="n">the</span> <span class="n">rights</span>
<span class="k">to</span> <span class="n">use</span><span class="p">,</span> <span class="n">copy</span><span class="p">,</span> <span class="n">modify</span><span class="p">,</span> <span class="n">merge</span><span class="p">,</span> <span class="nb">publish</span><span class="p">,</span> <span class="n">distribute</span><span class="p">,</span> <span class="n">sublicense</span><span class="p">,</span> <span class="k">and</span><span class="p">/</span><span class="k">or</span> <span class="n">sell</span>
<span class="n">copies</span> <span class="k">of</span> <span class="n">the</span> <span class="n">Software</span><span class="p">,</span> <span class="k">and</span> <span class="k">to</span> <span class="n">permit</span> <span class="n">persons</span> <span class="k">to</span> <span class="n">whom</span> <span class="n">the</span> <span class="n">Software</span> <span class="n">is</span>
<span class="n">furnished</span> <span class="k">to</span> <span class="k">do</span> <span class="n">so</span><span class="p">,</span> <span class="n">subject</span> <span class="k">to</span> <span class="n">the</span> <span class="n">following</span> <span class="n">conditions</span><span class="p">:</span>

<span class="n">The</span> <span class="n">above</span> <span class="n">copyright</span> <span class="n">notice</span> <span class="k">and</span> <span class="n">this</span> <span class="n">permission</span> <span class="n">notice</span> <span class="n">shall</span> <span class="n">be</span> <span class="n">included</span> <span class="k">in</span>
<span class="n">all</span> <span class="n">copies</span> <span class="k">or</span> <span class="n">substantial</span> <span class="n">portions</span> <span class="k">of</span> <span class="n">the</span> <span class="n">Software</span><span class="p">.</span>

<span class="n">THE</span> <span class="n">SOFTWARE</span> <span class="n">IS</span> <span class="n">PROVIDED</span> <span class="s2">"AS IS"</span><span class="p">,</span> <span class="n">WITHOUT</span> <span class="n">WARRANTY</span> <span class="k">OF</span> <span class="n">ANY</span> <span class="n">KIND</span><span class="p">,</span> <span class="n">EXPRESS</span> <span class="k">OR</span>
<span class="n">IMPLIED</span><span class="p">,</span> <span class="n">INCLUDING</span> <span class="n">BUT</span> <span class="k">NOT</span> <span class="n">LIMITED</span> <span class="k">TO</span> <span class="n">THE</span> <span class="n">WARRANTIES</span> <span class="k">OF</span> <span class="n">MERCHANTABILITY</span><span class="p">,</span>
<span class="n">FITNESS</span> <span class="n">FOR</span> <span class="n">A</span> <span class="n">PARTICULAR</span> <span class="n">PURPOSE</span> <span class="k">AND</span> <span class="n">NONINFRINGEMENT</span><span class="p">.</span> <span class="k">IN</span> <span class="n">NO</span> <span class="n">EVENT</span> <span class="n">SHALL</span> <span class="n">THE</span>
<span class="n">AUTHORS</span> <span class="k">OR</span> <span class="n">COPYRIGHT</span> <span class="n">HOLDERS</span> <span class="n">BE</span> <span class="n">LIABLE</span> <span class="n">FOR</span> <span class="n">ANY</span> <span class="n">CLAIM</span><span class="p">,</span> <span class="n">DAMAGES</span> <span class="k">OR</span> <span class="n">OTHER</span>
<span class="n">LIABILITY</span><span class="p">,</span> <span class="n">WHETHER</span> <span class="k">IN</span> <span class="n">AN</span> <span class="n">ACTION</span> <span class="k">OF</span> <span class="n">CONTRACT</span><span class="p">,</span> <span class="n">TORT</span> <span class="k">OR</span> <span class="n">OTHERWISE</span><span class="p">,</span> <span class="n">ARISING</span> <span class="k">FROM</span><span class="p">,</span>
<span class="n">OUT</span> <span class="k">OF</span> <span class="k">OR</span> <span class="k">IN</span> <span class="n">CONNECTION</span> <span class="k">WITH</span> <span class="n">THE</span> <span class="n">SOFTWARE</span> <span class="k">OR</span> <span class="n">THE</span> <span class="n">USE</span> <span class="k">OR</span> <span class="n">OTHER</span> <span class="n">DEALINGS</span> <span class="k">IN</span>
<span class="n">THE</span> <span class="n">SOFTWARE</span><span class="p">.</span>
 <span class="p">****************************************************************************/</span>
<span class="k">package</span> <span class="n">org</span><span class="p">.</span><span class="n">cocos2dx</span><span class="p">.</span><span class="n">lib</span><span class="p">;</span>

<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">UnsupportedEncodingException</span><span class="p">;</span>
<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">Locale</span><span class="p">;</span>

<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">app</span><span class="p">.</span><span class="n">Activity</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">Context</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">SharedPreferences</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">pm</span><span class="p">.</span><span class="n">ApplicationInfo</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">res</span><span class="p">.</span><span class="n">AssetManager</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">os</span><span class="p">.</span><span class="n">Build</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">DisplayMetrics</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">Display</span><span class="p">;</span>
<span class="n">import</span> <span class="n">android</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">WindowManager</span><span class="p">;</span>

<span class="k">public</span> <span class="n">class</span> <span class="n">Cocos2dxHelper</span> <span class="p">{</span>
	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Constants</span>
	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">final</span> <span class="k">String</span> <span class="n">PREFS_NAME</span> <span class="p">=</span> <span class="s2">"Cocos2dxPrefsFile"</span><span class="p">;</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Fields</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">Cocos2dxMusic</span> <span class="n">sCocos2dMusic</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">Cocos2dxSound</span> <span class="n">sCocos2dSound</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">AssetManager</span> <span class="n">sAssetManager</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">Cocos2dxAccelerometer</span> <span class="n">sCocos2dxAccelerometer</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="k">boolean</span> <span class="n">sAccelerometerEnabled</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="k">String</span> <span class="n">sPackageName</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="k">String</span> <span class="n">sFileDirectory</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">Context</span> <span class="n">sContext</span> <span class="p">=</span> <span class="n">null</span><span class="p">;</span>
	<span class="n">private</span> <span class="n">static</span> <span class="n">Cocos2dxHelperListener</span> <span class="n">sCocos2dxHelperListener</span><span class="p">;</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Constructors</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">init</span><span class="p">(</span><span class="n">final</span> <span class="n">Context</span> <span class="n">pContext</span><span class="p">,</span> <span class="n">final</span> <span class="n">Cocos2dxHelperListener</span> <span class="n">pCocos2dxHelperListener</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">final</span> <span class="n">ApplicationInfo</span> <span class="n">applicationInfo</span> <span class="p">=</span> <span class="n">pContext</span><span class="p">.</span><span class="n">getApplicationInfo</span><span class="p">();</span>
		
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sContext</span> <span class="p">=</span> <span class="n">pContext</span><span class="p">;</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxHelperListener</span> <span class="p">=</span> <span class="n">pCocos2dxHelperListener</span><span class="p">;</span>

		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sPackageName</span> <span class="p">=</span> <span class="n">applicationInfo</span><span class="p">.</span><span class="n">packageName</span><span class="p">;</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sFileDirectory</span> <span class="p">=</span> <span class="n">pContext</span><span class="p">.</span><span class="n">getFilesDir</span><span class="p">().</span><span class="n">getAbsolutePath</span><span class="p">();</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">nativeSetApkPath</span><span class="p">(</span><span class="n">applicationInfo</span><span class="p">.</span><span class="n">sourceDir</span><span class="p">);</span>

		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Cocos2dxAccelerometer</span><span class="p">(</span><span class="n">pContext</span><span class="p">);</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Cocos2dxMusic</span><span class="p">(</span><span class="n">pContext</span><span class="p">);</span>
		<span class="n">int</span> <span class="n">simultaneousStreams</span> <span class="p">=</span> <span class="n">Cocos2dxSound</span><span class="p">.</span><span class="n">MAX_SIMULTANEOUS_STREAMS_DEFAULT</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">getDeviceModel</span><span class="p">().</span><span class="n">indexOf</span><span class="p">(</span><span class="s2">"GT-I9100"</span><span class="p">)</span> <span class="c1">!= -1) {
</span>            <span class="n">simultaneousStreams</span> <span class="p">=</span> <span class="n">Cocos2dxSound</span><span class="p">.</span><span class="n">MAX_SIMULTANEOUS_STREAMS_I9100</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span> <span class="p">=</span> <span class="n">new</span> <span class="n">Cocos2dxSound</span><span class="p">(</span><span class="n">pContext</span><span class="p">,</span> <span class="n">simultaneousStreams</span><span class="p">);</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAssetManager</span> <span class="p">=</span> <span class="n">pContext</span><span class="p">.</span><span class="n">getAssets</span><span class="p">();</span>
		<span class="n">Cocos2dxBitmap</span><span class="p">.</span><span class="n">setContext</span><span class="p">(</span><span class="n">pContext</span><span class="p">);</span>
		<span class="n">Cocos2dxETCLoader</span><span class="p">.</span><span class="n">setContext</span><span class="p">(</span><span class="n">pContext</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Getter</span> <span class="p">&amp;</span> <span class="n">Setter</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Methods</span> <span class="n">for</span><span class="p">/</span><span class="k">from</span> <span class="n">SuperClass</span><span class="p">/</span><span class="n">Interfaces</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Methods</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">native</span> <span class="n">void</span> <span class="n">nativeSetApkPath</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pApkPath</span><span class="p">);</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">native</span> <span class="n">void</span> <span class="n">nativeSetEditTextDialogResult</span><span class="p">(</span><span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pBytes</span><span class="p">);</span>

	<span class="k">public</span> <span class="n">static</span> <span class="k">String</span> <span class="n">getCocos2dxPackageName</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sPackageName</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="k">String</span> <span class="n">getCocos2dxWritablePath</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sFileDirectory</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="k">String</span> <span class="n">getCurrentLanguage</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Locale</span><span class="p">.</span><span class="n">getDefault</span><span class="p">().</span><span class="n">getLanguage</span><span class="p">();</span>
	<span class="p">}</span>
	
	<span class="k">public</span> <span class="n">static</span> <span class="k">String</span> <span class="n">getDeviceModel</span><span class="p">(){</span>
		<span class="n">return</span> <span class="n">Build</span><span class="p">.</span><span class="k">MODEL</span><span class="p">;</span>
    <span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">AssetManager</span> <span class="n">getAssetManager</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAssetManager</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">enableAccelerometer</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAccelerometerEnabled</span> <span class="p">=</span> <span class="nb">true</span><span class="p">;</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span><span class="p">.</span><span class="n">enable</span><span class="p">();</span>
	<span class="p">}</span>


	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setAccelerometerInterval</span><span class="p">(</span><span class="n">float</span> <span class="n">interval</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span><span class="p">.</span><span class="n">setInterval</span><span class="p">(</span><span class="n">interval</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">disableAccelerometer</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAccelerometerEnabled</span> <span class="p">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span><span class="p">.</span><span class="n">disable</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">preloadBackgroundMusic</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pPath</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">preloadBackgroundMusic</span><span class="p">(</span><span class="n">pPath</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">playBackgroundMusic</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pPath</span><span class="p">,</span> <span class="n">final</span> <span class="k">boolean</span> <span class="n">isLoop</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">playBackgroundMusic</span><span class="p">(</span><span class="n">pPath</span><span class="p">,</span> <span class="n">isLoop</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">resumeBackgroundMusic</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">resumeBackgroundMusic</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">pauseBackgroundMusic</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">pauseBackgroundMusic</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">stopBackgroundMusic</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">stopBackgroundMusic</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">rewindBackgroundMusic</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">rewindBackgroundMusic</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="k">boolean</span> <span class="n">isBackgroundMusicPlaying</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">isBackgroundMusicPlaying</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">float</span> <span class="n">getBackgroundMusicVolume</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">getBackgroundVolume</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setBackgroundMusicVolume</span><span class="p">(</span><span class="n">final</span> <span class="n">float</span> <span class="n">volume</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="n">setBackgroundVolume</span><span class="p">(</span><span class="n">volume</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">preloadEffect</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">path</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">preloadEffect</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">playEffect</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">path</span><span class="p">,</span> <span class="n">final</span> <span class="k">boolean</span> <span class="n">isLoop</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">playEffect</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">isLoop</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">resumeEffect</span><span class="p">(</span><span class="n">final</span> <span class="n">int</span> <span class="n">soundId</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">resumeEffect</span><span class="p">(</span><span class="n">soundId</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">pauseEffect</span><span class="p">(</span><span class="n">final</span> <span class="n">int</span> <span class="n">soundId</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">pauseEffect</span><span class="p">(</span><span class="n">soundId</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">stopEffect</span><span class="p">(</span><span class="n">final</span> <span class="n">int</span> <span class="n">soundId</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">stopEffect</span><span class="p">(</span><span class="n">soundId</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">float</span> <span class="n">getEffectsVolume</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">return</span> <span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">getEffectsVolume</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setEffectsVolume</span><span class="p">(</span><span class="n">final</span> <span class="n">float</span> <span class="n">volume</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">setEffectsVolume</span><span class="p">(</span><span class="n">volume</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">unloadEffect</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">path</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">unloadEffect</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">pauseAllEffects</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">pauseAllEffects</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">resumeAllEffects</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">resumeAllEffects</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">stopAllEffects</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="n">stopAllEffects</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="k">end</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dMusic</span><span class="p">.</span><span class="k">end</span><span class="p">();</span>
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dSound</span><span class="p">.</span><span class="k">end</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">onResume</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAccelerometerEnabled</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span><span class="p">.</span><span class="n">enable</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">onPause</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sAccelerometerEnabled</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxAccelerometer</span><span class="p">.</span><span class="n">disable</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">terminateProcess</span><span class="p">()</span> <span class="p">{</span>
		<span class="n">android</span><span class="p">.</span><span class="n">os</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">killProcess</span><span class="p">(</span><span class="n">android</span><span class="p">.</span><span class="n">os</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">myPid</span><span class="p">());</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">void</span> <span class="n">showDialog</span><span class="p">(</span><span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pTitleBytes</span><span class="p">,</span> <span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pMessageBytes</span><span class="p">)</span> <span class="p">{</span>
		
		<span class="k">String</span> <span class="n">pTitle</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">pTitleBytes</span><span class="p">==</span><span class="n">null</span> <span class="p">||</span> <span class="n">pTitleBytes</span><span class="p">.</span><span class="n">length</span><span class="p">==</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">pTitle</span><span class="p">=</span><span class="s2">""</span><span class="p">;</span>
		<span class="p">}</span><span class="k">else</span>
		<span class="p">{</span>
			<span class="n">pTitle</span><span class="p">=</span><span class="n">new</span> <span class="k">String</span><span class="p">(</span><span class="n">pTitleBytes</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">String</span> <span class="n">pMessage</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">pMessageBytes</span><span class="p">==</span><span class="n">null</span> <span class="p">||</span> <span class="n">pMessageBytes</span><span class="p">.</span><span class="n">length</span><span class="p">==</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">pMessage</span><span class="p">=</span><span class="s2">""</span><span class="p">;</span>
		<span class="p">}</span><span class="k">else</span>
		<span class="p">{</span>
			<span class="n">pMessage</span><span class="p">=</span><span class="n">new</span> <span class="k">String</span><span class="p">(</span><span class="n">pMessageBytes</span><span class="p">);</span>
		<span class="p">}</span>
		
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxHelperListener</span><span class="p">.</span><span class="n">showDialog</span><span class="p">(</span><span class="n">pTitle</span><span class="p">,</span> <span class="n">pMessage</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">private</span> <span class="n">static</span> <span class="n">void</span> <span class="n">showEditTextDialog</span><span class="p">(</span><span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pTitleBytes</span><span class="p">,</span> <span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">pMessageBytes</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pInputMode</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pInputFlag</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pReturnType</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pMaxLength</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">String</span> <span class="n">pTitle</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">pTitleBytes</span><span class="p">==</span><span class="n">null</span> <span class="p">||</span> <span class="n">pTitleBytes</span><span class="p">.</span><span class="n">length</span><span class="p">==</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">pTitle</span><span class="p">=</span><span class="s2">""</span><span class="p">;</span>
		<span class="p">}</span><span class="k">else</span>
		<span class="p">{</span>
			<span class="n">pTitle</span><span class="p">=</span><span class="n">new</span> <span class="k">String</span><span class="p">(</span><span class="n">pTitleBytes</span><span class="p">);</span>
		<span class="p">}</span>
		
		<span class="k">String</span> <span class="n">pMessage</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">pMessageBytes</span><span class="p">==</span><span class="n">null</span> <span class="p">||</span> <span class="n">pMessageBytes</span><span class="p">.</span><span class="n">length</span><span class="p">==</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">pMessage</span><span class="p">=</span><span class="s2">""</span><span class="p">;</span>
		<span class="p">}</span><span class="k">else</span>
		<span class="p">{</span>
			<span class="n">pMessage</span><span class="p">=</span><span class="n">new</span> <span class="k">String</span><span class="p">(</span><span class="n">pMessageBytes</span><span class="p">);</span>
		<span class="p">}</span>
		
		<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxHelperListener</span><span class="p">.</span><span class="n">showEditTextDialog</span><span class="p">(</span><span class="n">pTitle</span><span class="p">,</span> <span class="n">pMessage</span><span class="p">,</span> <span class="n">pInputMode</span><span class="p">,</span> <span class="n">pInputFlag</span><span class="p">,</span> <span class="n">pReturnType</span><span class="p">,</span> <span class="n">pMaxLength</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setEditTextDialogResult</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pResult</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">try</span> <span class="p">{</span>
			<span class="n">final</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">bytesUTF8</span> <span class="p">=</span> <span class="n">pResult</span><span class="p">.</span><span class="n">getBytes</span><span class="p">(</span><span class="s2">"UTF8"</span><span class="p">);</span>

			<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">sCocos2dxHelperListener</span><span class="p">.</span><span class="n">runOnGLThread</span><span class="p">(</span><span class="n">new</span> <span class="n">Runnable</span><span class="p">()</span> <span class="p">{</span>
				<span class="p">@</span><span class="n">Override</span>
				<span class="k">public</span> <span class="n">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
					<span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">nativeSetEditTextDialogResult</span><span class="p">(</span><span class="n">bytesUTF8</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">});</span>
		<span class="p">}</span> <span class="n">catch</span> <span class="p">(</span><span class="n">UnsupportedEncodingException</span> <span class="n">pUnsupportedEncodingException</span><span class="p">)</span> <span class="p">{</span>
			<span class="p">/*</span> <span class="n">Nothing</span><span class="p">.</span> <span class="p">*/</span>
		<span class="p">}</span>
	<span class="p">}</span>

    <span class="k">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getDPI</span><span class="p">()</span>
    <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">sContext</span> <span class="c1">!= null)
</span>		<span class="p">{</span>
			<span class="n">DisplayMetrics</span> <span class="n">metrics</span> <span class="p">=</span> <span class="n">new</span> <span class="n">DisplayMetrics</span><span class="p">();</span>
			<span class="n">WindowManager</span> <span class="n">wm</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getWindowManager</span><span class="p">();</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">wm</span> <span class="c1">!= null)
</span>			<span class="p">{</span>
				<span class="n">Display</span> <span class="n">d</span> <span class="p">=</span> <span class="n">wm</span><span class="p">.</span><span class="n">getDefaultDisplay</span><span class="p">();</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="c1">!= null)
</span>				<span class="p">{</span>
					<span class="n">d</span><span class="p">.</span><span class="n">getMetrics</span><span class="p">(</span><span class="n">metrics</span><span class="p">);</span>
					<span class="n">return</span> <span class="p">(</span><span class="n">int</span><span class="p">)(</span><span class="n">metrics</span><span class="p">.</span><span class="n">density</span><span class="p">*</span><span class="m">160.0f</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="p">//</span> <span class="p">===========================================================</span>
 	<span class="p">//</span> <span class="n">Functions</span> <span class="n">for</span> <span class="n">CCUserDefault</span>
 	<span class="p">//</span> <span class="p">===========================================================</span>
    
    <span class="k">public</span> <span class="n">static</span> <span class="k">boolean</span> <span class="n">getBoolForKey</span><span class="p">(</span><span class="k">String</span> <span class="n">key</span><span class="p">,</span> <span class="k">boolean</span> <span class="n">defaultValue</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">PREFS_NAME</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    	<span class="n">return</span> <span class="n">settings</span><span class="p">.</span><span class="n">getBoolean</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">defaultValue</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getIntegerForKey</span><span class="p">(</span><span class="k">String</span> <span class="n">key</span><span class="p">,</span> <span class="n">int</span> <span class="n">defaultValue</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">PREFS_NAME</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    	<span class="n">return</span> <span class="n">settings</span><span class="p">.</span><span class="n">getInt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">defaultValue</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">static</span> <span class="n">float</span> <span class="n">getFloatForKey</span><span class="p">(</span><span class="k">String</span> <span class="n">key</span><span class="p">,</span> <span class="n">float</span> <span class="n">defaultValue</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">PREFS_NAME</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    	<span class="n">return</span> <span class="n">settings</span><span class="p">.</span><span class="n">getFloat</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">defaultValue</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">static</span> <span class="n">double</span> <span class="n">getDoubleForKey</span><span class="p">(</span><span class="k">String</span> <span class="n">key</span><span class="p">,</span> <span class="n">double</span> <span class="n">defaultValue</span><span class="p">)</span> <span class="p">{</span>
    	<span class="p">//</span> <span class="n">SharedPreferences</span> <span class="n">doesn</span><span class="s1">'t support saving double value
    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
    	return settings.getFloat(key, (float)defaultValue);
    }
    
    public static String getStringForKey(String key, String defaultValue) {
    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
    	return settings.getString(key, defaultValue);
    }
    
    public static void setBoolForKey(String key, boolean value) {
    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
    	SharedPreferences.Editor editor = settings.edit();
    	editor.putBoolean(key, value);
    	editor.commit();
    }
    
    public static void setIntegerForKey(String key, int value) {
    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
    	SharedPreferences.Editor editor = settings.edit();
    	editor.putInt(key, value);
    	editor.commit();
    }
    
    public static void setFloatForKey(String key, float value) {
    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
    	SharedPreferences.Editor editor = settings.edit();
    	editor.putFloat(key, value);
    	editor.commit();
    }
    
    public static void setDoubleForKey(String key, double value) {
    	// SharedPreferences doesn'</span><span class="n">t</span> <span class="n">support</span> <span class="n">recording</span> <span class="n">double</span> <span class="n">value</span>
    	<span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">PREFS_NAME</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    	<span class="n">SharedPreferences</span><span class="p">.</span><span class="n">Editor</span> <span class="n">editor</span> <span class="p">=</span> <span class="n">settings</span><span class="p">.</span><span class="n">edit</span><span class="p">();</span>
    	<span class="n">editor</span><span class="p">.</span><span class="n">putFloat</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">(</span><span class="n">float</span><span class="p">)</span><span class="n">value</span><span class="p">);</span>
    	<span class="n">editor</span><span class="p">.</span><span class="n">commit</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">setStringForKey</span><span class="p">(</span><span class="k">String</span> <span class="n">key</span><span class="p">,</span> <span class="k">String</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    	<span class="n">SharedPreferences</span> <span class="n">settings</span> <span class="p">=</span> <span class="p">((</span><span class="n">Activity</span><span class="p">)</span><span class="n">sContext</span><span class="p">).</span><span class="n">getSharedPreferences</span><span class="p">(</span><span class="n">Cocos2dxHelper</span><span class="p">.</span><span class="n">PREFS_NAME</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
    	<span class="n">SharedPreferences</span><span class="p">.</span><span class="n">Editor</span> <span class="n">editor</span> <span class="p">=</span> <span class="n">settings</span><span class="p">.</span><span class="n">edit</span><span class="p">();</span>
    	<span class="n">editor</span><span class="p">.</span><span class="n">putString</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    	<span class="n">editor</span><span class="p">.</span><span class="n">commit</span><span class="p">();</span>
    <span class="p">}</span>
	
	<span class="p">//</span> <span class="p">===========================================================</span>
	<span class="p">//</span> <span class="n">Inner</span> <span class="k">and</span> <span class="n">Anonymous</span> <span class="n">Classes</span>
	<span class="p">//</span> <span class="p">===========================================================</span>

	<span class="k">public</span> <span class="n">static</span> <span class="n">interface</span> <span class="n">Cocos2dxHelperListener</span> <span class="p">{</span>
		<span class="k">public</span> <span class="n">void</span> <span class="n">showDialog</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pTitle</span><span class="p">,</span> <span class="n">final</span> <span class="k">String</span> <span class="n">pMessage</span><span class="p">);</span>
		<span class="k">public</span> <span class="n">void</span> <span class="n">showEditTextDialog</span><span class="p">(</span><span class="n">final</span> <span class="k">String</span> <span class="n">pTitle</span><span class="p">,</span> <span class="n">final</span> <span class="k">String</span> <span class="n">pMessage</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pInputMode</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pInputFlag</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pReturnType</span><span class="p">,</span> <span class="n">final</span> <span class="n">int</span> <span class="n">pMaxLength</span><span class="p">);</span>

		<span class="k">public</span> <span class="n">void</span> <span class="n">runOnGLThread</span><span class="p">(</span><span class="n">final</span> <span class="n">Runnable</span> <span class="n">pRunnable</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>



</code></pre></div></div>

<hr />
:ET