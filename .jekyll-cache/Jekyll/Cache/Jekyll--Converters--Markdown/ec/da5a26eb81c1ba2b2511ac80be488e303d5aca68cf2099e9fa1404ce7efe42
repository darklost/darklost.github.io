I"z<p><strong><em>常见的错误捕获方法</em></strong></p>

<h3 id="1-logcat">1 logcat</h3>

<p>Android最常用的调试方式<code class="highlighter-rouge">logcat</code>:</p>

<p>常见的问题都会在logcat中显示</p>

<ul>
  <li>优势：java层的错误很容易看出来</li>
  <li>劣势：c/c++层的问题很难看出来</li>
</ul>

<h3 id="2-ndk-stack">2 ndk-stack</h3>

<p>Android C/C++代码出问题比较好用的方式</p>

<ul>
  <li>优势：常见C/C++代码的问题能通过崩溃的堆栈信息查看</li>
  <li>劣势：内存问题很难检测出来</li>
</ul>

<h3 id="3-ndk-gdb">3 ndk-gdb</h3>

<p><code class="highlighter-rouge">注意</code></p>

<blockquote>
  <p>导出环境变量：</p>

  <p><code class="highlighter-rouge">ANDROID_NDK_ROOT=/user/dengke/android/android-ndk-r10c</code>
<code class="highlighter-rouge">export ANDROID_NDK_ROOT</code></p>

  <p>编译：</p>

  <p><code class="highlighter-rouge">ndk-build clean all NDK_DEBUG=1</code></p>

  <p>终端运行：
<code class="highlighter-rouge">ndk-gdb --start</code>(如果程序app已运行直接输入 <code class="highlighter-rouge">ndk-gdb</code>)</p>

  <p>运行app,然后终端执行<code class="highlighter-rouge">gdb命令</code></p>
</blockquote>

<ul>
  <li>优势：可以断点debug，对比较麻烦的内存问题效果不错</li>
  <li>劣势：调试比较麻烦</li>
</ul>

<hr />
:ET