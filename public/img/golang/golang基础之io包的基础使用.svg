<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1783" height="451" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 1783 451"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(115, 161, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M753.5,60.5v30h-612V110.5"></path><path id="kity_path_33" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M40.5,178.5V224.5L60.5,224.5"></path><path id="kity_path_35" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M40.5,178.5V276.5L60.5,276.5"></path><path id="kity_path_37" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M753.5,60.5v30h-227V120.5"></path><path id="kity_path_39" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M423.5,188.5V234.5L443.5,234.5"></path><path id="kity_path_41" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M753.5,60.5v30h212.5V110.5"></path><path id="kity_path_43" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M800.5,178.5V224.5L820.5,224.5"></path><path id="kity_path_45" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M800.5,178.5V348.5L820.5,348.5"></path><path id="kity_path_47" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M753.5,60.5v30h768.5V160.5"></path><path id="kity_path_49" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1447.5,228.5V274.5L1467.5,274.5"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(115, 161, 191)" stroke="rgb(57, 80, 96)" d="M628.5,20.5h250a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-250a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="30.09999990463257" x="647.5">golang基础之io包的基础使用</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M647.5,40.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M647.5,40.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_103" fill="white" stroke="gray" d="M147.5,103.5A6,6,0,1,1,135.5,103.5A6,6,0,1,1,147.5,103.5"></path><path id="kity_path_104" fill="none" stroke="gray" d="M137,103.5L146,103.5"></path></g><path id="node_outline4" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M23.5,110.5h236a3,3,0,0,1,3,3v62a3,3,0,0,1,-3,3h-236a3,3,0,0,1,-3,-3v-62a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text4" fill="black"><text id="kity_text_55" text-rendering="inherit" font-size="14" dy=".8em" y="114.40000009536743" x="40.5">type Reader interface {</text><text id="kity_text_56" text-rendering="inherit" font-size="14" dy=".8em" y="135.40000009536743" x="40.5">	Read(p []byte) (n int, err error)</text><text id="kity_text_57" text-rendering="inherit" font-size="14" dy=".8em" y="156.40000009536743" x="40.5">}</text></g></g><g id="minder_node3"><g id="node_expander1" display="none" style="cursor: pointer;"><path id="kity_path_97" fill="white" stroke="gray" d="M60.5,224.5A6,6,0,1,1,48.5,224.5A6,6,0,1,1,60.5,224.5"></path><path id="kity_path_98" fill="none" stroke="gray"></path></g><path id="node_outline2" fill="none" stroke="none" d="M65.5,213.5h162a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-162a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text2" fill="black"><text id="kity_text_51" text-rendering="inherit" font-size="12" dy=".8em" y="216.70000004768372" x="70.5">将 len(p) 个字节读取到 p 中</text></g></g><g id="minder_node4"><g id="node_expander2" display="none" style="cursor: pointer;"><path id="kity_path_100" fill="white" stroke="gray" d="M60.5,276.5A6,6,0,1,1,48.5,276.5A6,6,0,1,1,60.5,276.5"></path><path id="kity_path_101" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M65.5,265.5h291a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-291a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text3" fill="black"><text id="kity_text_53" text-rendering="inherit" font-size="12" dy=".8em" y="268.7000000476837" x="70.5">ReadFrom() 常用方法 实现了Reader接口的都可以用</text></g></g><g id="minder_node5"><g id="node_expander5" style="cursor: pointer;"><path id="kity_path_109" fill="white" stroke="gray" d="M532.5,113.5A6,6,0,1,1,520.5,113.5A6,6,0,1,1,532.5,113.5"></path><path id="kity_path_110" fill="none" stroke="gray" d="M522,113.5L531,113.5"></path></g><path id="node_outline6" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M406.5,120.5h240a3,3,0,0,1,3,3v62a3,3,0,0,1,-3,3h-240a3,3,0,0,1,-3,-3v-62a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text6" fill="black"><text id="kity_text_61" text-rendering="inherit" font-size="14" dy=".8em" y="124.40000009536743" x="423.5">type Writer interface {</text><text id="kity_text_62" text-rendering="inherit" font-size="14" dy=".8em" y="145.40000009536743" x="423.5">	Write(p []byte) (n int, err error)</text><text id="kity_text_63" text-rendering="inherit" font-size="14" dy=".8em" y="166.40000009536743" x="423.5">}</text></g></g><g id="minder_node6"><g id="node_expander4" display="none" style="cursor: pointer;"><path id="kity_path_106" fill="white" stroke="gray" d="M443.5,234.5A6,6,0,1,1,431.5,234.5A6,6,0,1,1,443.5,234.5"></path><path id="kity_path_107" fill="none" stroke="gray"></path></g><path id="node_outline5" fill="none" stroke="none" d="M448.5,223.5h289a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-289a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text5" fill="black"><text id="kity_text_59" text-rendering="inherit" font-size="12" dy=".8em" y="226.70000004768372" x="453.5">Write 方法用于将 p 中的数据写入到对象的数据流中</text></g></g><g id="minder_node7"><g id="node_expander8" style="cursor: pointer;"><path id="kity_path_118" fill="white" stroke="gray" d="M972,103.5A6,6,0,1,1,960,103.5A6,6,0,1,1,972,103.5"></path><path id="kity_path_119" fill="none" stroke="gray" d="M961.5,103.5L970.5,103.5"></path></g><path id="node_outline9" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M783.5,110.5h365a3,3,0,0,1,3,3v62a3,3,0,0,1,-3,3h-365a3,3,0,0,1,-3,-3v-62a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text9" fill="black"><text id="kity_text_77" text-rendering="inherit" font-size="14" dy=".8em" y="114.40000009536743" x="800.5">type Seeker interface {</text><text id="kity_text_78" text-rendering="inherit" font-size="14" dy=".8em" y="135.40000009536743" x="800.5">	Seek(offset int64, whence int) (ret int64, err error)</text><text id="kity_text_79" text-rendering="inherit" font-size="14" dy=".8em" y="156.40000009536743" x="800.5">}</text></g></g><g id="minder_node8"><g id="node_expander6" display="none" style="cursor: pointer;"><path id="kity_path_112" fill="white" stroke="gray" d="M820.5,224.5A6,6,0,1,1,808.5,224.5A6,6,0,1,1,820.5,224.5"></path><path id="kity_path_113" fill="none" stroke="gray"></path></g><path id="node_outline7" fill="none" stroke="none" d="M825.5,213.5h428a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-428a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text7" fill="black"><text id="kity_text_65" text-rendering="inherit" font-size="12" dy=".8em" y="216.70000004768372" x="830.5">&#xa0;Seek 设置下一次读写操作的指针位置，每次的读写操作都是从指针位置开始的</text></g></g><g id="minder_node9"><g id="node_expander7" display="none" style="cursor: pointer;"><path id="kity_path_115" fill="white" stroke="gray" d="M820.5,348.5A6,6,0,1,1,808.5,348.5A6,6,0,1,1,820.5,348.5"></path><path id="kity_path_116" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M825.5,265.5h311a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-311a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text8" fill="black"><text id="kity_text_67" text-rendering="inherit" font-size="12" dy=".8em" y="268.7000000476837" x="830.5">whence 为 0：表示从数据的开头开始移动指针</text><text id="kity_text_68" text-rendering="inherit" font-size="12" dy=".8em" y="286.7000000476837" x="830.5">whence 为 1：表示从数据的当前指针位置开始移动指针</text><text id="kity_text_69" text-rendering="inherit" font-size="12" dy=".8em" y="304.7000000476837" x="830.5">如果 whence 为 2：表示从数据的尾部开始移动指针</text><text id="kity_text_70" text-rendering="inherit" font-size="12" dy=".8em" y="322.7000000476837" x="830.5"></text><text id="kity_text_71" text-rendering="inherit" font-size="12" dy=".8em" y="340.7000000476837" x="830.5">SeekStart   = 0 // seek relative to the origin of the file</text><text id="kity_text_72" text-rendering="inherit" font-size="12" dy=".8em" y="358.7000000476837" x="830.5">SeekCurrent = 1 // seek relative to the current offset</text><text id="kity_text_73" text-rendering="inherit" font-size="12" dy=".8em" y="376.7000000476837" x="830.5">SeekEnd     = 2 // seek relative to the end</text><text id="kity_text_74" text-rendering="inherit" font-size="12" dy=".8em" y="394.7000000476837" x="830.5"></text><text id="kity_text_75" text-rendering="inherit" font-size="12" dy=".8em" y="412.7000000476837" x="830.5">offset 是指针移动的偏移量</text></g></g><g id="minder_node10"><g id="node_expander10" style="cursor: pointer;"><path id="kity_path_124" fill="white" stroke="gray" d="M1528,153.5A6,6,0,1,1,1516,153.5A6,6,0,1,1,1528,153.5"></path><path id="kity_path_125" fill="none" stroke="gray" d="M1517.5,153.5L1526.5,153.5"></path></g><path id="node_outline11" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1430.5,160.5h183a3,3,0,0,1,3,3v62a3,3,0,0,1,-3,3h-183a3,3,0,0,1,-3,-3v-62a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text11" fill="black"><text id="kity_text_83" text-rendering="inherit" font-size="14" dy=".8em" y="164.40000009536743" x="1447.5">type Closer interface {</text><text id="kity_text_84" text-rendering="inherit" font-size="14" dy=".8em" y="185.40000009536743" x="1447.5">	Close() error</text><text id="kity_text_85" text-rendering="inherit" font-size="14" dy=".8em" y="206.40000009536743" x="1447.5">}</text></g></g><g id="minder_node11"><g id="node_expander9" display="none" style="cursor: pointer;"><path id="kity_path_121" fill="white" stroke="gray" d="M1467.5,274.5A6,6,0,1,1,1455.5,274.5A6,6,0,1,1,1467.5,274.5"></path><path id="kity_path_122" fill="none" stroke="gray"></path></g><path id="node_outline10" fill="none" stroke="none" d="M1472.5,263.5h286a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-286a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text10" fill="black"><text id="kity_text_81" text-rendering="inherit" font-size="12" dy=".8em" y="266.7000000476837" x="1477.5">Close 一般用于关闭文件，关闭连接，关闭数据库等</text></g></g></g></g></svg>