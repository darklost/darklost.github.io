<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1645" height="479" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 1645 479"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(115, 161, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M875.5,60.5v30h-571V106.5"></path><path id="kity_path_33" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M304.5,132.5v20h-174.5V172.5"></path><path id="kity_path_35" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M304.5,132.5v20h113V231.5"></path><path id="kity_path_37" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M875.5,60.5v30h-18V110.5"></path><path id="kity_path_39" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M857.5,136.5v20h5V216.5"></path><path id="kity_path_41" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M862.5,274.5v15h-0.5V365.5"></path><path id="kity_path_43" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M875.5,60.5v30h507V104.5"></path><path id="kity_path_45" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1382.5,130.5v20h0V165.5"></path><path id="kity_path_47" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1382.5,187.5v15h1V355.5"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(115, 161, 191)" stroke="rgb(57, 80, 96)" d="M803.5,20.5h143a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-143a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="30.09999990463257" x="822.5">接口 interface</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M822.5,40.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M822.5,40.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_92" fill="white" stroke="gray" d="M310,99.5A6,6,0,1,1,298,99.5A6,6,0,1,1,310,99.5"></path><path id="kity_path_93" fill="none" stroke="gray" d="M299.5,99.5L308.5,99.5"></path></g><path id="node_outline4" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M271.5,106.5h65a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-65a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text4" fill="black"><text id="kity_text_56" text-rendering="inherit" font-size="14" dy=".8em" y="110.40000009536743" x="288.5">定义</text></g></g><g id="minder_node3"><g id="node_expander1" display="none" style="cursor: pointer;"><path id="kity_path_86" fill="white" stroke="gray" d="M135.5,166.5A6,6,0,1,1,123.5,166.5A6,6,0,1,1,135.5,166.5"></path><path id="kity_path_87" fill="none" stroke="gray"></path></g><path id="node_outline2" fill="none" stroke="none" d="M25.5,172.5h208a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-208a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text2" fill="black"><text id="kity_text_49" text-rendering="inherit" font-size="12" dy=".8em" y="175.70000004768372" x="30.5">接口是一类规范 是某一些方法的集合</text></g></g><g id="minder_node4"><g id="node_expander2" display="none" style="cursor: pointer;"><path id="kity_path_89" fill="white" stroke="gray" d="M423,225.5A6,6,0,1,1,411,225.5A6,6,0,1,1,423,225.5"></path><path id="kity_path_90" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M344.5,231.5h145a5,5,0,0,1,5,5v66a5,5,0,0,1,-5,5h-145a5,5,0,0,1,-5,-5v-66a5,5,0,0,1,5,-5z"></path><g id="node_text3" fill="black"><text id="kity_text_51" text-rendering="inherit" font-size="12" dy=".8em" y="234.70000004768372" x="349.5">type Animal interfance{</text><text id="kity_text_52" text-rendering="inherit" font-size="12" dy=".8em" y="252.70000004768372" x="349.5">&#xa0; &#xa0;Run()</text><text id="kity_text_53" text-rendering="inherit" font-size="12" dy=".8em" y="270.7000000476837" x="349.5">&#xa0; &#xa0;Eat()</text><text id="kity_text_54" text-rendering="inherit" font-size="12" dy=".8em" y="288.7000000476837" x="349.5">}</text></g></g><g id="minder_node5"><g id="node_expander6" style="cursor: pointer;"><path id="kity_path_101" fill="white" stroke="gray" d="M863,103.5A6,6,0,1,1,851,103.5A6,6,0,1,1,863,103.5"></path><path id="kity_path_102" fill="none" stroke="gray" d="M852.5,103.5L861.5,103.5"></path></g><path id="node_outline7" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M806.5,110.5h101a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-101a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text7" fill="black"><text id="kity_text_68" text-rendering="inherit" font-size="14" dy=".8em" y="114.40000009536743" x="823.5">使用(实现)</text></g></g><g id="minder_node6"><g id="node_expander5" style="cursor: pointer;"><path id="kity_path_98" fill="white" stroke="gray" d="M868,210.5A6,6,0,1,1,856,210.5A6,6,0,1,1,868,210.5"></path><path id="kity_path_99" fill="none" stroke="gray" d="M857.5,210.5L866.5,210.5"></path></g><path id="node_outline6" fill="none" stroke="none" d="M809.5,216.5h105a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-105a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text6" fill="black"><text id="kity_text_64" text-rendering="inherit" font-size="12" dy=".8em" y="219.70000004768372" x="814.5">type Dog struct{</text><text id="kity_text_65" text-rendering="inherit" font-size="12" dy=".8em" y="237.70000004768372" x="814.5">&#xa0; &#xa0;Name string</text><text id="kity_text_66" text-rendering="inherit" font-size="12" dy=".8em" y="255.70000004768372" x="814.5">}</text></g></g><g id="minder_node7"><g id="node_expander4" display="none" style="cursor: pointer;"><path id="kity_path_95" fill="white" stroke="gray" d="M867.5,359.5A6,6,0,1,1,855.5,359.5A6,6,0,1,1,867.5,359.5"></path><path id="kity_path_96" fill="none" stroke="gray"></path></g><path id="node_outline5" fill="none" stroke="none" d="M799.5,365.5h124a5,5,0,0,1,5,5v84a5,5,0,0,1,-5,5h-124a5,5,0,0,1,-5,-5v-84a5,5,0,0,1,5,-5z"></path><g id="node_text5" fill="black"><text id="kity_text_58" text-rendering="inherit" font-size="12" dy=".8em" y="368.7000000476837" x="804.5">func (d *Dog)Run(){</text><text id="kity_text_59" text-rendering="inherit" font-size="12" dy=".8em" y="386.7000000476837" x="804.5">}</text><text id="kity_text_60" text-rendering="inherit" font-size="12" dy=".8em" y="404.7000000476837" x="804.5"></text><text id="kity_text_61" text-rendering="inherit" font-size="12" dy=".8em" y="422.7000000476837" x="804.5">func (d *Dog)Eat(){</text><text id="kity_text_62" text-rendering="inherit" font-size="12" dy=".8em" y="440.7000000476837" x="804.5">}</text></g></g><g id="minder_node8"><g id="node_expander9" style="cursor: pointer;"><path id="kity_path_110" fill="white" stroke="gray" d="M1388,97.5A6,6,0,1,1,1376,97.5A6,6,0,1,1,1388,97.5"></path><path id="kity_path_111" fill="none" stroke="gray" d="M1377.5,97.5L1386.5,97.5"></path></g><path id="node_outline10" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1349.5,104.5h65a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-65a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text10" fill="black"><text id="kity_text_75" text-rendering="inherit" font-size="14" dy=".8em" y="108.40000009536743" x="1366.5">干货</text></g></g><g id="minder_node9"><g id="node_expander8" style="cursor: pointer;"><path id="kity_path_107" fill="white" stroke="gray" d="M1388,159.5A6,6,0,1,1,1376,159.5A6,6,0,1,1,1388,159.5"></path><path id="kity_path_108" fill="none" stroke="gray" d="M1377.5,159.5L1386.5,159.5"></path></g><path id="node_outline9" fill="none" stroke="none" d="M1327.5,165.5h109a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-109a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text9" fill="black"><text id="kity_text_73" text-rendering="inherit" font-size="12" dy=".8em" y="168.70000004768372" x="1332.5">具体工作里的用法</text></g></g><g id="minder_node10"><g id="node_expander7" display="none" style="cursor: pointer;"><path id="kity_path_104" fill="white" stroke="gray" d="M1389,349.5A6,6,0,1,1,1377,349.5A6,6,0,1,1,1389,349.5"></path><path id="kity_path_105" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M1145.5,355.5h475a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-475a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text8" fill="black"><text id="kity_text_70" text-rendering="inherit" font-size="12" dy=".8em" y="358.7000000476837" x="1150.5">1. go没有什么好的实现泛型的方法 此时的接口可以用来实现泛型</text><text id="kity_text_71" text-rendering="inherit" font-size="12" dy=".8em" y="376.7000000476837" x="1150.5">2. 解耦合 比较类似java的一些方式&#xa0; 先声明一个接口 然后 一切方法都用这个接口来操作&#xa0;</text></g></g></g></g></svg>